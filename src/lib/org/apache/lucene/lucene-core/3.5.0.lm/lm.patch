### Eclipse Workspace Patch 1.0
#P lucene-3.5.0
Index: src/java/org/apache/lucene/index/TermInfosReader.java
===================================================================
--- src/java/org/apache/lucene/index/TermInfosReader.java	(revision 1214027)
+++ src/java/org/apache/lucene/index/TermInfosReader.java	(working copy)
@@ -22,8 +22,8 @@
 
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.DoubleBarrelLRUCache;
 import org.apache.lucene.util.CloseableThreadLocal;
+import org.apache.lucene.util.DoubleBarrelLRUCache;
 
 /** This stores a monotonically increasing set of <Term, TermInfo> pairs in a
  * Directory.  Pairs are accessed either by Term or by ordinal position the
@@ -84,8 +84,12 @@
   /**
    * Per-thread resources managed by ThreadLocal
    */
-  private static final class ThreadResources {
+  static final class ThreadResources {
     SegmentTermEnum termEnum;
+    BytesRef termBytesRefGetMethodTermInfosReader = new BytesRef();
+    BytesRef scratchGetIndexOffsetMethodTermInfosReaderIndex = new BytesRef();
+    BytesRef termBytesRefGetIndexOffsetMethodTermInfosReaderIndex = new BytesRef();
+    BytesRef bufferCompareToMethodTermInfosReaderIndex = new BytesRef();
   }
   
   TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)
@@ -168,12 +172,11 @@
 
   /** Returns the TermInfo for a Term in the set, or null. */
   TermInfo get(Term term) throws IOException {
-    BytesRef termBytesRef = new BytesRef(term.text);
-    return get(term, false, termBytesRef);
+    return get(term, false);
   }
   
   /** Returns the TermInfo for a Term in the set, or null. */
-  private TermInfo get(Term term, boolean mustSeekEnum, BytesRef termBytesRef) throws IOException {
+  private TermInfo get(Term term, boolean mustSeekEnum) throws IOException {
     if (size == 0) return null;
 
     ensureIndexIsRead();
@@ -183,18 +186,22 @@
     TermInfoAndOrd tiOrd = termsCache.get(cacheKey);
     ThreadResources resources = getThreadResources();
     
+    BytesRef termBytesRef = resources.termBytesRefGetMethodTermInfosReader;
+    termBytesRef.copy(term.text);
+    
     if (!mustSeekEnum && tiOrd != null) {
       return tiOrd;
     }
     
     // optimize sequential access: first try scanning cached enum w/o seeking
     SegmentTermEnum enumerator = resources.termEnum;
+    BytesRef buffer = resources.bufferCompareToMethodTermInfosReaderIndex;
     if (enumerator.term() != null                 // term is at or past current
 	&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)
 	    || term.compareTo(enumerator.term()) >= 0)) {
       int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;
       if (indexLength == enumOffset    // but before end of block
-    || index.compareTo(term,termBytesRef,enumOffset) < 0) {
+    || index.compareTo(term,termBytesRef,enumOffset,buffer) < 0) {
        // no need to seek
 
         final TermInfo ti;
@@ -229,7 +236,7 @@
       indexPos = (int) (tiOrd.termOrd / totalIndexInterval);
     } else {
       // Must do binary search:
-      indexPos = index.getIndexOffset(term,termBytesRef);
+      indexPos = index.getIndexOffset(term,resources);
     }
 
     index.seekEnum(enumerator, indexPos);
@@ -279,10 +286,11 @@
     if (size == 0) return -1;
 
     ensureIndexIsRead();
-    BytesRef termBytesRef = new BytesRef(term.text);
-    int indexOffset = index.getIndexOffset(term,termBytesRef);
+    
+    ThreadResources resources = getThreadResources();
+    int indexOffset = index.getIndexOffset(term,resources);
     
-    SegmentTermEnum enumerator = getThreadResources().termEnum;
+    SegmentTermEnum enumerator = resources.termEnum;
     index.seekEnum(enumerator, indexOffset);
 
     while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}
@@ -300,8 +308,7 @@
 
   /** Returns an enumeration of terms starting at or after the named term. */
   public SegmentTermEnum terms(Term term) throws IOException {
-    BytesRef termBytesRef = new BytesRef(term.text);
-    get(term, true, termBytesRef);
+    get(term, true);
     return (SegmentTermEnum)getThreadResources().termEnum.clone();
   }
 }
Index: src/java/org/apache/lucene/index/TermInfosReaderIndex.java
===================================================================
--- src/java/org/apache/lucene/index/TermInfosReaderIndex.java	(revision 1214027)
+++ src/java/org/apache/lucene/index/TermInfosReaderIndex.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.Comparator;
 import java.util.List;
 
+import org.apache.lucene.index.TermInfosReader.ThreadResources;
 import org.apache.lucene.util.BitUtil;
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.PagedBytes.PagedBytesDataInput;
@@ -38,7 +39,7 @@
  */
 class TermInfosReaderIndex {
 
-  private static final int MAX_PAGE_BITS = 18; // 256 KB block
+  private static final int MAX_PAGE_BITS = 24; // 16 MB block
   private Term[] fields;
   private int totalIndexInterval;
   private Comparator<BytesRef> comparator = BytesRef.getUTF8SortedAsUTF16Comparator();
@@ -146,11 +147,14 @@
    *          the term to locate.
    * @throws IOException 
    */
-  int getIndexOffset(Term term, BytesRef termBytesRef) throws IOException {
+  int getIndexOffset(Term term, ThreadResources resources) throws IOException {
     int lo = 0;
     int hi = indexSize - 1;
     PagedBytesDataInput input = (PagedBytesDataInput) dataInput.clone();
-    BytesRef scratch = new BytesRef();
+    BytesRef termBytesRef = resources.termBytesRefGetIndexOffsetMethodTermInfosReaderIndex;
+    termBytesRef.copy(term.text);
+    
+    BytesRef scratch = resources.scratchGetIndexOffsetMethodTermInfosReaderIndex;
     while (hi >= lo) {
       int mid = (lo + hi) >>> 1;
       int delta = compareTo(term, termBytesRef, mid, input, scratch);
@@ -202,8 +206,8 @@
    * @return int.
    * @throws IOException 
    */
-  int compareTo(Term term, BytesRef termBytesRef, int termIndex) throws IOException {
-    return compareTo(term, termBytesRef, termIndex, (PagedBytesDataInput) dataInput.clone(), new BytesRef());
+  int compareTo(Term term, BytesRef termBytesRef, int termIndex, BytesRef buffer) throws IOException {
+    return compareTo(term, termBytesRef, termIndex, (PagedBytesDataInput) dataInput.clone(), buffer);
   }
 
   /**
Index: src/test/org/apache/lucene/index/TestTermInfosReaderIndex.java
===================================================================
--- src/test/org/apache/lucene/index/TestTermInfosReaderIndex.java	(revision 1214027)
+++ src/test/org/apache/lucene/index/TestTermInfosReaderIndex.java	(working copy)
@@ -103,7 +103,7 @@
     for (int i = 0; i < index.length(); i++) {
       Term t = index.getTerm(i);
       int compareTo = term.compareTo(t);
-      assertEquals(compareTo, index.compareTo(term, termBytesRef, i));
+      assertEquals(compareTo, index.compareTo(term, termBytesRef, i, new BytesRef()));
     }
   }
   
