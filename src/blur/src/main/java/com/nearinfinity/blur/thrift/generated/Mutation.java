/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Mutation implements TBase<Mutation, Mutation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Mutation");

  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField DOCUMENT_FAMILIES_FIELD_DESC = new TField("documentFamilies", TType.LIST, (short)2);

  public String id;
  public List<DocumentFamily> documentFamilies;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    DOCUMENT_FAMILIES((short)2, "documentFamilies");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DOCUMENT_FAMILIES
          return DOCUMENT_FAMILIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DOCUMENT_FAMILIES, new FieldMetaData("documentFamilies", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, DocumentFamily.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Mutation.class, metaDataMap);
  }

  public Mutation() {
  }

  public Mutation(
    String id,
    List<DocumentFamily> documentFamilies)
  {
    this();
    this.id = id;
    this.documentFamilies = documentFamilies;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Mutation(Mutation other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetDocumentFamilies()) {
      List<DocumentFamily> __this__documentFamilies = new ArrayList<DocumentFamily>();
      for (DocumentFamily other_element : other.documentFamilies) {
        __this__documentFamilies.add(new DocumentFamily(other_element));
      }
      this.documentFamilies = __this__documentFamilies;
    }
  }

  public Mutation deepCopy() {
    return new Mutation(this);
  }

  @Deprecated
  public Mutation clone() {
    return new Mutation(this);
  }

  public String getId() {
    return this.id;
  }

  public Mutation setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getDocumentFamiliesSize() {
    return (this.documentFamilies == null) ? 0 : this.documentFamilies.size();
  }

  public java.util.Iterator<DocumentFamily> getDocumentFamiliesIterator() {
    return (this.documentFamilies == null) ? null : this.documentFamilies.iterator();
  }

  public void addToDocumentFamilies(DocumentFamily elem) {
    if (this.documentFamilies == null) {
      this.documentFamilies = new ArrayList<DocumentFamily>();
    }
    this.documentFamilies.add(elem);
  }

  public List<DocumentFamily> getDocumentFamilies() {
    return this.documentFamilies;
  }

  public Mutation setDocumentFamilies(List<DocumentFamily> documentFamilies) {
    this.documentFamilies = documentFamilies;
    return this;
  }

  public void unsetDocumentFamilies() {
    this.documentFamilies = null;
  }

  /** Returns true if field documentFamilies is set (has been asigned a value) and false otherwise */
  public boolean isSetDocumentFamilies() {
    return this.documentFamilies != null;
  }

  public void setDocumentFamiliesIsSet(boolean value) {
    if (!value) {
      this.documentFamilies = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case DOCUMENT_FAMILIES:
      if (value == null) {
        unsetDocumentFamilies();
      } else {
        setDocumentFamilies((List<DocumentFamily>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DOCUMENT_FAMILIES:
      return getDocumentFamilies();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case ID:
      return isSetId();
    case DOCUMENT_FAMILIES:
      return isSetDocumentFamilies();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Mutation)
      return this.equals((Mutation)that);
    return false;
  }

  public boolean equals(Mutation that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_documentFamilies = true && this.isSetDocumentFamilies();
    boolean that_present_documentFamilies = true && that.isSetDocumentFamilies();
    if (this_present_documentFamilies || that_present_documentFamilies) {
      if (!(this_present_documentFamilies && that_present_documentFamilies))
        return false;
      if (!this.documentFamilies.equals(that.documentFamilies))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Mutation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Mutation typedOther = (Mutation)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocumentFamilies()).compareTo(typedOther.isSetDocumentFamilies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocumentFamilies()) {      lastComparison = TBaseHelper.compareTo(this.documentFamilies, typedOther.documentFamilies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DOCUMENT_FAMILIES
          if (field.type == TType.LIST) {
            {
              TList _list22 = iprot.readListBegin();
              this.documentFamilies = new ArrayList<DocumentFamily>(_list22.size);
              for (int _i23 = 0; _i23 < _list22.size; ++_i23)
              {
                DocumentFamily _elem24;
                _elem24 = new DocumentFamily();
                _elem24.read(iprot);
                this.documentFamilies.add(_elem24);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.documentFamilies != null) {
      oprot.writeFieldBegin(DOCUMENT_FAMILIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.documentFamilies.size()));
        for (DocumentFamily _iter25 : this.documentFamilies)
        {
          _iter25.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Mutation(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("documentFamilies:");
    if (this.documentFamilies == null) {
      sb.append("null");
    } else {
      sb.append(this.documentFamilies);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

