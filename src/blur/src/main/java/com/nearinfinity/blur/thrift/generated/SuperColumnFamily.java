/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class SuperColumnFamily implements TBase<SuperColumnFamily, SuperColumnFamily._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SuperColumnFamily");

  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
  private static final TField SUPER_COLUMNS_FIELD_DESC = new TField("superColumns", TType.MAP, (short)2);

  public String name;
  public Map<String,SuperColumn> superColumns;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NAME((short)1, "name"),
    SUPER_COLUMNS((short)2, "superColumns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SUPER_COLUMNS
          return SUPER_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUPER_COLUMNS, new FieldMetaData("superColumns", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, SuperColumn.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SuperColumnFamily.class, metaDataMap);
  }

  public SuperColumnFamily() {
  }

  public SuperColumnFamily(
    String name,
    Map<String,SuperColumn> superColumns)
  {
    this();
    this.name = name;
    this.superColumns = superColumns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SuperColumnFamily(SuperColumnFamily other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSuperColumns()) {
      Map<String,SuperColumn> __this__superColumns = new HashMap<String,SuperColumn>();
      for (Map.Entry<String, SuperColumn> other_element : other.superColumns.entrySet()) {

        String other_element_key = other_element.getKey();
        SuperColumn other_element_value = other_element.getValue();

        String __this__superColumns_copy_key = other_element_key;

        SuperColumn __this__superColumns_copy_value = new SuperColumn(other_element_value);

        __this__superColumns.put(__this__superColumns_copy_key, __this__superColumns_copy_value);
      }
      this.superColumns = __this__superColumns;
    }
  }

  public SuperColumnFamily deepCopy() {
    return new SuperColumnFamily(this);
  }

  @Deprecated
  public SuperColumnFamily clone() {
    return new SuperColumnFamily(this);
  }

  public String getName() {
    return this.name;
  }

  public SuperColumnFamily setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSuperColumnsSize() {
    return (this.superColumns == null) ? 0 : this.superColumns.size();
  }

  public void putToSuperColumns(String key, SuperColumn val) {
    if (this.superColumns == null) {
      this.superColumns = new HashMap<String,SuperColumn>();
    }
    this.superColumns.put(key, val);
  }

  public Map<String,SuperColumn> getSuperColumns() {
    return this.superColumns;
  }

  public SuperColumnFamily setSuperColumns(Map<String,SuperColumn> superColumns) {
    this.superColumns = superColumns;
    return this;
  }

  public void unsetSuperColumns() {
    this.superColumns = null;
  }

  /** Returns true if field superColumns is set (has been asigned a value) and false otherwise */
  public boolean isSetSuperColumns() {
    return this.superColumns != null;
  }

  public void setSuperColumnsIsSet(boolean value) {
    if (!value) {
      this.superColumns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SUPER_COLUMNS:
      if (value == null) {
        unsetSuperColumns();
      } else {
        setSuperColumns((Map<String,SuperColumn>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SUPER_COLUMNS:
      return getSuperColumns();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case NAME:
      return isSetName();
    case SUPER_COLUMNS:
      return isSetSuperColumns();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SuperColumnFamily)
      return this.equals((SuperColumnFamily)that);
    return false;
  }

  public boolean equals(SuperColumnFamily that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_superColumns = true && this.isSetSuperColumns();
    boolean that_present_superColumns = true && that.isSetSuperColumns();
    if (this_present_superColumns || that_present_superColumns) {
      if (!(this_present_superColumns && that_present_superColumns))
        return false;
      if (!this.superColumns.equals(that.superColumns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SuperColumnFamily other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SuperColumnFamily typedOther = (SuperColumnFamily)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperColumns()).compareTo(typedOther.isSetSuperColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperColumns()) {      lastComparison = TBaseHelper.compareTo(this.superColumns, typedOther.superColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPER_COLUMNS
          if (field.type == TType.MAP) {
            {
              TMap _map22 = iprot.readMapBegin();
              this.superColumns = new HashMap<String,SuperColumn>(2*_map22.size);
              for (int _i23 = 0; _i23 < _map22.size; ++_i23)
              {
                String _key24;
                SuperColumn _val25;
                _key24 = iprot.readString();
                _val25 = new SuperColumn();
                _val25.read(iprot);
                this.superColumns.put(_key24, _val25);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.superColumns != null) {
      oprot.writeFieldBegin(SUPER_COLUMNS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.superColumns.size()));
        for (Map.Entry<String, SuperColumn> _iter26 : this.superColumns.entrySet())
        {
          oprot.writeString(_iter26.getKey());
          _iter26.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SuperColumnFamily(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superColumns:");
    if (this.superColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.superColumns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

