/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class TableDescriptor implements TBase<TableDescriptor, TableDescriptor._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TableDescriptor");

  private static final TField IS_ENABLED_FIELD_DESC = new TField("isEnabled", TType.BOOL, (short)1);
  private static final TField ANALYZER_DEF_FIELD_DESC = new TField("analyzerDef", TType.STRING, (short)2);
  private static final TField PARTITIONER_CLASS_FIELD_DESC = new TField("partitionerClass", TType.STRING, (short)3);
  private static final TField SHARD_DIRECTORY_LOCATIONS_FIELD_DESC = new TField("shardDirectoryLocations", TType.MAP, (short)4);

  public boolean isEnabled;
  public String analyzerDef;
  public String partitionerClass;
  public Map<String,String> shardDirectoryLocations;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    IS_ENABLED((short)1, "isEnabled"),
    ANALYZER_DEF((short)2, "analyzerDef"),
    PARTITIONER_CLASS((short)3, "partitionerClass"),
    SHARD_DIRECTORY_LOCATIONS((short)4, "shardDirectoryLocations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_ENABLED
          return IS_ENABLED;
        case 2: // ANALYZER_DEF
          return ANALYZER_DEF;
        case 3: // PARTITIONER_CLASS
          return PARTITIONER_CLASS;
        case 4: // SHARD_DIRECTORY_LOCATIONS
          return SHARD_DIRECTORY_LOCATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISENABLED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_ENABLED, new FieldMetaData("isEnabled", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ANALYZER_DEF, new FieldMetaData("analyzerDef", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PARTITIONER_CLASS, new FieldMetaData("partitionerClass", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHARD_DIRECTORY_LOCATIONS, new FieldMetaData("shardDirectoryLocations", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TableDescriptor.class, metaDataMap);
  }

  public TableDescriptor() {
  }

  public TableDescriptor(
    boolean isEnabled,
    String analyzerDef,
    String partitionerClass,
    Map<String,String> shardDirectoryLocations)
  {
    this();
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    this.analyzerDef = analyzerDef;
    this.partitionerClass = partitionerClass;
    this.shardDirectoryLocations = shardDirectoryLocations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TableDescriptor(TableDescriptor other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.isEnabled = other.isEnabled;
    if (other.isSetAnalyzerDef()) {
      this.analyzerDef = other.analyzerDef;
    }
    if (other.isSetPartitionerClass()) {
      this.partitionerClass = other.partitionerClass;
    }
    if (other.isSetShardDirectoryLocations()) {
      Map<String,String> __this__shardDirectoryLocations = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.shardDirectoryLocations.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__shardDirectoryLocations_copy_key = other_element_key;

        String __this__shardDirectoryLocations_copy_value = other_element_value;

        __this__shardDirectoryLocations.put(__this__shardDirectoryLocations_copy_key, __this__shardDirectoryLocations_copy_value);
      }
      this.shardDirectoryLocations = __this__shardDirectoryLocations;
    }
  }

  public TableDescriptor deepCopy() {
    return new TableDescriptor(this);
  }

  @Deprecated
  public TableDescriptor clone() {
    return new TableDescriptor(this);
  }

  public boolean isIsEnabled() {
    return this.isEnabled;
  }

  public TableDescriptor setIsEnabled(boolean isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bit_vector.clear(__ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been asigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return __isset_bit_vector.get(__ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ISENABLED_ISSET_ID, value);
  }

  public String getAnalyzerDef() {
    return this.analyzerDef;
  }

  public TableDescriptor setAnalyzerDef(String analyzerDef) {
    this.analyzerDef = analyzerDef;
    return this;
  }

  public void unsetAnalyzerDef() {
    this.analyzerDef = null;
  }

  /** Returns true if field analyzerDef is set (has been asigned a value) and false otherwise */
  public boolean isSetAnalyzerDef() {
    return this.analyzerDef != null;
  }

  public void setAnalyzerDefIsSet(boolean value) {
    if (!value) {
      this.analyzerDef = null;
    }
  }

  public String getPartitionerClass() {
    return this.partitionerClass;
  }

  public TableDescriptor setPartitionerClass(String partitionerClass) {
    this.partitionerClass = partitionerClass;
    return this;
  }

  public void unsetPartitionerClass() {
    this.partitionerClass = null;
  }

  /** Returns true if field partitionerClass is set (has been asigned a value) and false otherwise */
  public boolean isSetPartitionerClass() {
    return this.partitionerClass != null;
  }

  public void setPartitionerClassIsSet(boolean value) {
    if (!value) {
      this.partitionerClass = null;
    }
  }

  public int getShardDirectoryLocationsSize() {
    return (this.shardDirectoryLocations == null) ? 0 : this.shardDirectoryLocations.size();
  }

  public void putToShardDirectoryLocations(String key, String val) {
    if (this.shardDirectoryLocations == null) {
      this.shardDirectoryLocations = new HashMap<String,String>();
    }
    this.shardDirectoryLocations.put(key, val);
  }

  public Map<String,String> getShardDirectoryLocations() {
    return this.shardDirectoryLocations;
  }

  public TableDescriptor setShardDirectoryLocations(Map<String,String> shardDirectoryLocations) {
    this.shardDirectoryLocations = shardDirectoryLocations;
    return this;
  }

  public void unsetShardDirectoryLocations() {
    this.shardDirectoryLocations = null;
  }

  /** Returns true if field shardDirectoryLocations is set (has been asigned a value) and false otherwise */
  public boolean isSetShardDirectoryLocations() {
    return this.shardDirectoryLocations != null;
  }

  public void setShardDirectoryLocationsIsSet(boolean value) {
    if (!value) {
      this.shardDirectoryLocations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((Boolean)value);
      }
      break;

    case ANALYZER_DEF:
      if (value == null) {
        unsetAnalyzerDef();
      } else {
        setAnalyzerDef((String)value);
      }
      break;

    case PARTITIONER_CLASS:
      if (value == null) {
        unsetPartitionerClass();
      } else {
        setPartitionerClass((String)value);
      }
      break;

    case SHARD_DIRECTORY_LOCATIONS:
      if (value == null) {
        unsetShardDirectoryLocations();
      } else {
        setShardDirectoryLocations((Map<String,String>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_ENABLED:
      return new Boolean(isIsEnabled());

    case ANALYZER_DEF:
      return getAnalyzerDef();

    case PARTITIONER_CLASS:
      return getPartitionerClass();

    case SHARD_DIRECTORY_LOCATIONS:
      return getShardDirectoryLocations();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case IS_ENABLED:
      return isSetIsEnabled();
    case ANALYZER_DEF:
      return isSetAnalyzerDef();
    case PARTITIONER_CLASS:
      return isSetPartitionerClass();
    case SHARD_DIRECTORY_LOCATIONS:
      return isSetShardDirectoryLocations();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TableDescriptor)
      return this.equals((TableDescriptor)that);
    return false;
  }

  public boolean equals(TableDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_isEnabled = true;
    boolean that_present_isEnabled = true;
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_analyzerDef = true && this.isSetAnalyzerDef();
    boolean that_present_analyzerDef = true && that.isSetAnalyzerDef();
    if (this_present_analyzerDef || that_present_analyzerDef) {
      if (!(this_present_analyzerDef && that_present_analyzerDef))
        return false;
      if (!this.analyzerDef.equals(that.analyzerDef))
        return false;
    }

    boolean this_present_partitionerClass = true && this.isSetPartitionerClass();
    boolean that_present_partitionerClass = true && that.isSetPartitionerClass();
    if (this_present_partitionerClass || that_present_partitionerClass) {
      if (!(this_present_partitionerClass && that_present_partitionerClass))
        return false;
      if (!this.partitionerClass.equals(that.partitionerClass))
        return false;
    }

    boolean this_present_shardDirectoryLocations = true && this.isSetShardDirectoryLocations();
    boolean that_present_shardDirectoryLocations = true && that.isSetShardDirectoryLocations();
    if (this_present_shardDirectoryLocations || that_present_shardDirectoryLocations) {
      if (!(this_present_shardDirectoryLocations && that_present_shardDirectoryLocations))
        return false;
      if (!this.shardDirectoryLocations.equals(that.shardDirectoryLocations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TableDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TableDescriptor typedOther = (TableDescriptor)other;

    lastComparison = Boolean.valueOf(isSetIsEnabled()).compareTo(typedOther.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {      lastComparison = TBaseHelper.compareTo(this.isEnabled, typedOther.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalyzerDef()).compareTo(typedOther.isSetAnalyzerDef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalyzerDef()) {      lastComparison = TBaseHelper.compareTo(this.analyzerDef, typedOther.analyzerDef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionerClass()).compareTo(typedOther.isSetPartitionerClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionerClass()) {      lastComparison = TBaseHelper.compareTo(this.partitionerClass, typedOther.partitionerClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShardDirectoryLocations()).compareTo(typedOther.isSetShardDirectoryLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardDirectoryLocations()) {      lastComparison = TBaseHelper.compareTo(this.shardDirectoryLocations, typedOther.shardDirectoryLocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // IS_ENABLED
          if (field.type == TType.BOOL) {
            this.isEnabled = iprot.readBool();
            setIsEnabledIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ANALYZER_DEF
          if (field.type == TType.STRING) {
            this.analyzerDef = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PARTITIONER_CLASS
          if (field.type == TType.STRING) {
            this.partitionerClass = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SHARD_DIRECTORY_LOCATIONS
          if (field.type == TType.MAP) {
            {
              TMap _map9 = iprot.readMapBegin();
              this.shardDirectoryLocations = new HashMap<String,String>(2*_map9.size);
              for (int _i10 = 0; _i10 < _map9.size; ++_i10)
              {
                String _key11;
                String _val12;
                _key11 = iprot.readString();
                _val12 = iprot.readString();
                this.shardDirectoryLocations.put(_key11, _val12);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
    oprot.writeBool(this.isEnabled);
    oprot.writeFieldEnd();
    if (this.analyzerDef != null) {
      oprot.writeFieldBegin(ANALYZER_DEF_FIELD_DESC);
      oprot.writeString(this.analyzerDef);
      oprot.writeFieldEnd();
    }
    if (this.partitionerClass != null) {
      oprot.writeFieldBegin(PARTITIONER_CLASS_FIELD_DESC);
      oprot.writeString(this.partitionerClass);
      oprot.writeFieldEnd();
    }
    if (this.shardDirectoryLocations != null) {
      oprot.writeFieldBegin(SHARD_DIRECTORY_LOCATIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.shardDirectoryLocations.size()));
        for (Map.Entry<String, String> _iter13 : this.shardDirectoryLocations.entrySet())
        {
          oprot.writeString(_iter13.getKey());
          oprot.writeString(_iter13.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TableDescriptor(");
    boolean first = true;

    sb.append("isEnabled:");
    sb.append(this.isEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("analyzerDef:");
    if (this.analyzerDef == null) {
      sb.append("null");
    } else {
      sb.append(this.analyzerDef);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionerClass:");
    if (this.partitionerClass == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionerClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shardDirectoryLocations:");
    if (this.shardDirectoryLocations == null) {
      sb.append("null");
    } else {
      sb.append(this.shardDirectoryLocations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

