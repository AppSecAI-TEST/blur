/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecordMutation implements org.apache.thrift.TBase<RecordMutation, RecordMutation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordMutation");

  private static final org.apache.thrift.protocol.TField RECORD_MUTATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordMutationType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.SET, (short)4);

  /**
   * 
   * @see RecordMutationType
   */
  public RecordMutationType recordMutationType;
  public String family;
  public String recordId;
  public Set<Column> record;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RecordMutationType
     */
    RECORD_MUTATION_TYPE((short)1, "recordMutationType"),
    FAMILY((short)2, "family"),
    RECORD_ID((short)3, "recordId"),
    RECORD((short)4, "record");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_MUTATION_TYPE
          return RECORD_MUTATION_TYPE;
        case 2: // FAMILY
          return FAMILY;
        case 3: // RECORD_ID
          return RECORD_ID;
        case 4: // RECORD
          return RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_MUTATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recordMutationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecordMutationType.class)));
    tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordMutation.class, metaDataMap);
  }

  public RecordMutation() {
  }

  public RecordMutation(
    RecordMutationType recordMutationType,
    String family,
    String recordId,
    Set<Column> record)
  {
    this();
    this.recordMutationType = recordMutationType;
    this.family = family;
    this.recordId = recordId;
    this.record = record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordMutation(RecordMutation other) {
    if (other.isSetRecordMutationType()) {
      this.recordMutationType = other.recordMutationType;
    }
    if (other.isSetFamily()) {
      this.family = other.family;
    }
    if (other.isSetRecordId()) {
      this.recordId = other.recordId;
    }
    if (other.isSetRecord()) {
      Set<Column> __this__record = new HashSet<Column>();
      for (Column other_element : other.record) {
        __this__record.add(new Column(other_element));
      }
      this.record = __this__record;
    }
  }

  public RecordMutation deepCopy() {
    return new RecordMutation(this);
  }

  @Override
  public void clear() {
    this.recordMutationType = null;
    this.family = null;
    this.recordId = null;
    this.record = null;
  }

  /**
   * 
   * @see RecordMutationType
   */
  public RecordMutationType getRecordMutationType() {
    return this.recordMutationType;
  }

  /**
   * 
   * @see RecordMutationType
   */
  public RecordMutation setRecordMutationType(RecordMutationType recordMutationType) {
    this.recordMutationType = recordMutationType;
    return this;
  }

  public void unsetRecordMutationType() {
    this.recordMutationType = null;
  }

  /** Returns true if field recordMutationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordMutationType() {
    return this.recordMutationType != null;
  }

  public void setRecordMutationTypeIsSet(boolean value) {
    if (!value) {
      this.recordMutationType = null;
    }
  }

  public String getFamily() {
    return this.family;
  }

  public RecordMutation setFamily(String family) {
    this.family = family;
    return this;
  }

  public void unsetFamily() {
    this.family = null;
  }

  /** Returns true if field family is set (has been assigned a value) and false otherwise */
  public boolean isSetFamily() {
    return this.family != null;
  }

  public void setFamilyIsSet(boolean value) {
    if (!value) {
      this.family = null;
    }
  }

  public String getRecordId() {
    return this.recordId;
  }

  public RecordMutation setRecordId(String recordId) {
    this.recordId = recordId;
    return this;
  }

  public void unsetRecordId() {
    this.recordId = null;
  }

  /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordId() {
    return this.recordId != null;
  }

  public void setRecordIdIsSet(boolean value) {
    if (!value) {
      this.recordId = null;
    }
  }

  public int getRecordSize() {
    return (this.record == null) ? 0 : this.record.size();
  }

  public java.util.Iterator<Column> getRecordIterator() {
    return (this.record == null) ? null : this.record.iterator();
  }

  public void addToRecord(Column elem) {
    if (this.record == null) {
      this.record = new HashSet<Column>();
    }
    this.record.add(elem);
  }

  public Set<Column> getRecord() {
    return this.record;
  }

  public RecordMutation setRecord(Set<Column> record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECORD_MUTATION_TYPE:
      if (value == null) {
        unsetRecordMutationType();
      } else {
        setRecordMutationType((RecordMutationType)value);
      }
      break;

    case FAMILY:
      if (value == null) {
        unsetFamily();
      } else {
        setFamily((String)value);
      }
      break;

    case RECORD_ID:
      if (value == null) {
        unsetRecordId();
      } else {
        setRecordId((String)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((Set<Column>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECORD_MUTATION_TYPE:
      return getRecordMutationType();

    case FAMILY:
      return getFamily();

    case RECORD_ID:
      return getRecordId();

    case RECORD:
      return getRecord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECORD_MUTATION_TYPE:
      return isSetRecordMutationType();
    case FAMILY:
      return isSetFamily();
    case RECORD_ID:
      return isSetRecordId();
    case RECORD:
      return isSetRecord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordMutation)
      return this.equals((RecordMutation)that);
    return false;
  }

  public boolean equals(RecordMutation that) {
    if (that == null)
      return false;

    boolean this_present_recordMutationType = true && this.isSetRecordMutationType();
    boolean that_present_recordMutationType = true && that.isSetRecordMutationType();
    if (this_present_recordMutationType || that_present_recordMutationType) {
      if (!(this_present_recordMutationType && that_present_recordMutationType))
        return false;
      if (!this.recordMutationType.equals(that.recordMutationType))
        return false;
    }

    boolean this_present_family = true && this.isSetFamily();
    boolean that_present_family = true && that.isSetFamily();
    if (this_present_family || that_present_family) {
      if (!(this_present_family && that_present_family))
        return false;
      if (!this.family.equals(that.family))
        return false;
    }

    boolean this_present_recordId = true && this.isSetRecordId();
    boolean that_present_recordId = true && that.isSetRecordId();
    if (this_present_recordId || that_present_recordId) {
      if (!(this_present_recordId && that_present_recordId))
        return false;
      if (!this.recordId.equals(that.recordId))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RecordMutation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecordMutation typedOther = (RecordMutation)other;

    lastComparison = Boolean.valueOf(isSetRecordMutationType()).compareTo(typedOther.isSetRecordMutationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordMutationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordMutationType, typedOther.recordMutationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordId()).compareTo(typedOther.isSetRecordId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, typedOther.recordId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(typedOther.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, typedOther.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RECORD_MUTATION_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.recordMutationType = RecordMutationType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FAMILY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.family = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RECORD_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.recordId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RECORD
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set77 = iprot.readSetBegin();
              this.record = new HashSet<Column>(2*_set77.size);
              for (int _i78 = 0; _i78 < _set77.size; ++_i78)
              {
                Column _elem79;
                _elem79 = new Column();
                _elem79.read(iprot);
                this.record.add(_elem79);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.recordMutationType != null) {
      oprot.writeFieldBegin(RECORD_MUTATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.recordMutationType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.family != null) {
      oprot.writeFieldBegin(FAMILY_FIELD_DESC);
      oprot.writeString(this.family);
      oprot.writeFieldEnd();
    }
    if (this.recordId != null) {
      oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
      oprot.writeString(this.recordId);
      oprot.writeFieldEnd();
    }
    if (this.record != null) {
      oprot.writeFieldBegin(RECORD_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.record.size()));
        for (Column _iter80 : this.record)
        {
          _iter80.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordMutation(");
    boolean first = true;

    sb.append("recordMutationType:");
    if (this.recordMutationType == null) {
      sb.append("null");
    } else {
      sb.append(this.recordMutationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("family:");
    if (this.family == null) {
      sb.append("null");
    } else {
      sb.append(this.family);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordId:");
    if (this.recordId == null) {
      sb.append("null");
    } else {
      sb.append(this.recordId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

