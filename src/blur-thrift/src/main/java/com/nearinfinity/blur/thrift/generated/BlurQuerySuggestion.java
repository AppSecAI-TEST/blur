/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BlurQuerySuggestion implements org.apache.thrift.TBase<BlurQuerySuggestion, BlurQuerySuggestion._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlurQuerySuggestion");

  private static final org.apache.thrift.protocol.TField QUERY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStr", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalResults", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SHARD_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("shardInfo", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptions", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField REAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("realTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuTime", org.apache.thrift.protocol.TType.I64, (short)7);

  public String queryStr;
  public long totalResults;
  public Map<String,Long> shardInfo;
  public List<BlurException> exceptions;
  public BlurQuery query;
  public long realTime;
  public long cpuTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_STR((short)1, "queryStr"),
    TOTAL_RESULTS((short)2, "totalResults"),
    SHARD_INFO((short)3, "shardInfo"),
    EXCEPTIONS((short)4, "exceptions"),
    QUERY((short)5, "query"),
    REAL_TIME((short)6, "realTime"),
    CPU_TIME((short)7, "cpuTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_STR
          return QUERY_STR;
        case 2: // TOTAL_RESULTS
          return TOTAL_RESULTS;
        case 3: // SHARD_INFO
          return SHARD_INFO;
        case 4: // EXCEPTIONS
          return EXCEPTIONS;
        case 5: // QUERY
          return QUERY;
        case 6: // REAL_TIME
          return REAL_TIME;
        case 7: // CPU_TIME
          return CPU_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALRESULTS_ISSET_ID = 0;
  private static final int __REALTIME_ISSET_ID = 1;
  private static final int __CPUTIME_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_STR, new org.apache.thrift.meta_data.FieldMetaData("queryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("totalResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHARD_INFO, new org.apache.thrift.meta_data.FieldMetaData("shardInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("exceptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT))));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlurQuery.class)));
    tmpMap.put(_Fields.REAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("realTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("cpuTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlurQuerySuggestion.class, metaDataMap);
  }

  public BlurQuerySuggestion() {
    this.totalResults = 0L;

  }

  public BlurQuerySuggestion(
    String queryStr,
    long totalResults,
    Map<String,Long> shardInfo,
    List<BlurException> exceptions,
    BlurQuery query,
    long realTime,
    long cpuTime)
  {
    this();
    this.queryStr = queryStr;
    this.totalResults = totalResults;
    setTotalResultsIsSet(true);
    this.shardInfo = shardInfo;
    this.exceptions = exceptions;
    this.query = query;
    this.realTime = realTime;
    setRealTimeIsSet(true);
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlurQuerySuggestion(BlurQuerySuggestion other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQueryStr()) {
      this.queryStr = other.queryStr;
    }
    this.totalResults = other.totalResults;
    if (other.isSetShardInfo()) {
      Map<String,Long> __this__shardInfo = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.shardInfo.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__shardInfo_copy_key = other_element_key;

        Long __this__shardInfo_copy_value = other_element_value;

        __this__shardInfo.put(__this__shardInfo_copy_key, __this__shardInfo_copy_value);
      }
      this.shardInfo = __this__shardInfo;
    }
    if (other.isSetExceptions()) {
      List<BlurException> __this__exceptions = new ArrayList<BlurException>();
      for (BlurException other_element : other.exceptions) {
        __this__exceptions.add(new BlurException(other_element));
      }
      this.exceptions = __this__exceptions;
    }
    if (other.isSetQuery()) {
      this.query = new BlurQuery(other.query);
    }
    this.realTime = other.realTime;
    this.cpuTime = other.cpuTime;
  }

  public BlurQuerySuggestion deepCopy() {
    return new BlurQuerySuggestion(this);
  }

  @Override
  public void clear() {
    this.queryStr = null;
    this.totalResults = 0L;

    this.shardInfo = null;
    this.exceptions = null;
    this.query = null;
    setRealTimeIsSet(false);
    this.realTime = 0;
    setCpuTimeIsSet(false);
    this.cpuTime = 0;
  }

  public String getQueryStr() {
    return this.queryStr;
  }

  public BlurQuerySuggestion setQueryStr(String queryStr) {
    this.queryStr = queryStr;
    return this;
  }

  public void unsetQueryStr() {
    this.queryStr = null;
  }

  /** Returns true if field queryStr is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStr() {
    return this.queryStr != null;
  }

  public void setQueryStrIsSet(boolean value) {
    if (!value) {
      this.queryStr = null;
    }
  }

  public long getTotalResults() {
    return this.totalResults;
  }

  public BlurQuerySuggestion setTotalResults(long totalResults) {
    this.totalResults = totalResults;
    setTotalResultsIsSet(true);
    return this;
  }

  public void unsetTotalResults() {
    __isset_bit_vector.clear(__TOTALRESULTS_ISSET_ID);
  }

  /** Returns true if field totalResults is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalResults() {
    return __isset_bit_vector.get(__TOTALRESULTS_ISSET_ID);
  }

  public void setTotalResultsIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALRESULTS_ISSET_ID, value);
  }

  public int getShardInfoSize() {
    return (this.shardInfo == null) ? 0 : this.shardInfo.size();
  }

  public void putToShardInfo(String key, long val) {
    if (this.shardInfo == null) {
      this.shardInfo = new HashMap<String,Long>();
    }
    this.shardInfo.put(key, val);
  }

  public Map<String,Long> getShardInfo() {
    return this.shardInfo;
  }

  public BlurQuerySuggestion setShardInfo(Map<String,Long> shardInfo) {
    this.shardInfo = shardInfo;
    return this;
  }

  public void unsetShardInfo() {
    this.shardInfo = null;
  }

  /** Returns true if field shardInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetShardInfo() {
    return this.shardInfo != null;
  }

  public void setShardInfoIsSet(boolean value) {
    if (!value) {
      this.shardInfo = null;
    }
  }

  public int getExceptionsSize() {
    return (this.exceptions == null) ? 0 : this.exceptions.size();
  }

  public java.util.Iterator<BlurException> getExceptionsIterator() {
    return (this.exceptions == null) ? null : this.exceptions.iterator();
  }

  public void addToExceptions(BlurException elem) {
    if (this.exceptions == null) {
      this.exceptions = new ArrayList<BlurException>();
    }
    this.exceptions.add(elem);
  }

  public List<BlurException> getExceptions() {
    return this.exceptions;
  }

  public BlurQuerySuggestion setExceptions(List<BlurException> exceptions) {
    this.exceptions = exceptions;
    return this;
  }

  public void unsetExceptions() {
    this.exceptions = null;
  }

  /** Returns true if field exceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptions() {
    return this.exceptions != null;
  }

  public void setExceptionsIsSet(boolean value) {
    if (!value) {
      this.exceptions = null;
    }
  }

  public BlurQuery getQuery() {
    return this.query;
  }

  public BlurQuerySuggestion setQuery(BlurQuery query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public long getRealTime() {
    return this.realTime;
  }

  public BlurQuerySuggestion setRealTime(long realTime) {
    this.realTime = realTime;
    setRealTimeIsSet(true);
    return this;
  }

  public void unsetRealTime() {
    __isset_bit_vector.clear(__REALTIME_ISSET_ID);
  }

  /** Returns true if field realTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTime() {
    return __isset_bit_vector.get(__REALTIME_ISSET_ID);
  }

  public void setRealTimeIsSet(boolean value) {
    __isset_bit_vector.set(__REALTIME_ISSET_ID, value);
  }

  public long getCpuTime() {
    return this.cpuTime;
  }

  public BlurQuerySuggestion setCpuTime(long cpuTime) {
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    return this;
  }

  public void unsetCpuTime() {
    __isset_bit_vector.clear(__CPUTIME_ISSET_ID);
  }

  /** Returns true if field cpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuTime() {
    return __isset_bit_vector.get(__CPUTIME_ISSET_ID);
  }

  public void setCpuTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CPUTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_STR:
      if (value == null) {
        unsetQueryStr();
      } else {
        setQueryStr((String)value);
      }
      break;

    case TOTAL_RESULTS:
      if (value == null) {
        unsetTotalResults();
      } else {
        setTotalResults((Long)value);
      }
      break;

    case SHARD_INFO:
      if (value == null) {
        unsetShardInfo();
      } else {
        setShardInfo((Map<String,Long>)value);
      }
      break;

    case EXCEPTIONS:
      if (value == null) {
        unsetExceptions();
      } else {
        setExceptions((List<BlurException>)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((BlurQuery)value);
      }
      break;

    case REAL_TIME:
      if (value == null) {
        unsetRealTime();
      } else {
        setRealTime((Long)value);
      }
      break;

    case CPU_TIME:
      if (value == null) {
        unsetCpuTime();
      } else {
        setCpuTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_STR:
      return getQueryStr();

    case TOTAL_RESULTS:
      return new Long(getTotalResults());

    case SHARD_INFO:
      return getShardInfo();

    case EXCEPTIONS:
      return getExceptions();

    case QUERY:
      return getQuery();

    case REAL_TIME:
      return new Long(getRealTime());

    case CPU_TIME:
      return new Long(getCpuTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_STR:
      return isSetQueryStr();
    case TOTAL_RESULTS:
      return isSetTotalResults();
    case SHARD_INFO:
      return isSetShardInfo();
    case EXCEPTIONS:
      return isSetExceptions();
    case QUERY:
      return isSetQuery();
    case REAL_TIME:
      return isSetRealTime();
    case CPU_TIME:
      return isSetCpuTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlurQuerySuggestion)
      return this.equals((BlurQuerySuggestion)that);
    return false;
  }

  public boolean equals(BlurQuerySuggestion that) {
    if (that == null)
      return false;

    boolean this_present_queryStr = true && this.isSetQueryStr();
    boolean that_present_queryStr = true && that.isSetQueryStr();
    if (this_present_queryStr || that_present_queryStr) {
      if (!(this_present_queryStr && that_present_queryStr))
        return false;
      if (!this.queryStr.equals(that.queryStr))
        return false;
    }

    boolean this_present_totalResults = true;
    boolean that_present_totalResults = true;
    if (this_present_totalResults || that_present_totalResults) {
      if (!(this_present_totalResults && that_present_totalResults))
        return false;
      if (this.totalResults != that.totalResults)
        return false;
    }

    boolean this_present_shardInfo = true && this.isSetShardInfo();
    boolean that_present_shardInfo = true && that.isSetShardInfo();
    if (this_present_shardInfo || that_present_shardInfo) {
      if (!(this_present_shardInfo && that_present_shardInfo))
        return false;
      if (!this.shardInfo.equals(that.shardInfo))
        return false;
    }

    boolean this_present_exceptions = true && this.isSetExceptions();
    boolean that_present_exceptions = true && that.isSetExceptions();
    if (this_present_exceptions || that_present_exceptions) {
      if (!(this_present_exceptions && that_present_exceptions))
        return false;
      if (!this.exceptions.equals(that.exceptions))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_realTime = true;
    boolean that_present_realTime = true;
    if (this_present_realTime || that_present_realTime) {
      if (!(this_present_realTime && that_present_realTime))
        return false;
      if (this.realTime != that.realTime)
        return false;
    }

    boolean this_present_cpuTime = true;
    boolean that_present_cpuTime = true;
    if (this_present_cpuTime || that_present_cpuTime) {
      if (!(this_present_cpuTime && that_present_cpuTime))
        return false;
      if (this.cpuTime != that.cpuTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlurQuerySuggestion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlurQuerySuggestion typedOther = (BlurQuerySuggestion)other;

    lastComparison = Boolean.valueOf(isSetQueryStr()).compareTo(typedOther.isSetQueryStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStr, typedOther.queryStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalResults()).compareTo(typedOther.isSetTotalResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalResults, typedOther.totalResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShardInfo()).compareTo(typedOther.isSetShardInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardInfo, typedOther.shardInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptions()).compareTo(typedOther.isSetExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptions, typedOther.exceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealTime()).compareTo(typedOther.isSetRealTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTime, typedOther.realTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuTime()).compareTo(typedOther.isSetCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuTime, typedOther.cpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY_STR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.queryStr = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOTAL_RESULTS
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.totalResults = iprot.readI64();
            setTotalResultsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SHARD_INFO
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
              this.shardInfo = new HashMap<String,Long>(2*_map38.size);
              for (int _i39 = 0; _i39 < _map38.size; ++_i39)
              {
                String _key40;
                long _val41;
                _key40 = iprot.readString();
                _val41 = iprot.readI64();
                this.shardInfo.put(_key40, _val41);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EXCEPTIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
              this.exceptions = new ArrayList<BlurException>(_list42.size);
              for (int _i43 = 0; _i43 < _list42.size; ++_i43)
              {
                BlurException _elem44;
                _elem44 = new BlurException();
                _elem44.read(iprot);
                this.exceptions.add(_elem44);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // QUERY
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.query = new BlurQuery();
            this.query.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // REAL_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.realTime = iprot.readI64();
            setRealTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CPU_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.cpuTime = iprot.readI64();
            setCpuTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.queryStr != null) {
      oprot.writeFieldBegin(QUERY_STR_FIELD_DESC);
      oprot.writeString(this.queryStr);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_RESULTS_FIELD_DESC);
    oprot.writeI64(this.totalResults);
    oprot.writeFieldEnd();
    if (this.shardInfo != null) {
      oprot.writeFieldBegin(SHARD_INFO_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.shardInfo.size()));
        for (Map.Entry<String, Long> _iter45 : this.shardInfo.entrySet())
        {
          oprot.writeString(_iter45.getKey());
          oprot.writeI64(_iter45.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.exceptions != null) {
      oprot.writeFieldBegin(EXCEPTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.exceptions.size()));
        for (BlurException _iter46 : this.exceptions)
        {
          _iter46.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.query != null) {
      oprot.writeFieldBegin(QUERY_FIELD_DESC);
      this.query.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REAL_TIME_FIELD_DESC);
    oprot.writeI64(this.realTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CPU_TIME_FIELD_DESC);
    oprot.writeI64(this.cpuTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlurQuerySuggestion(");
    boolean first = true;

    sb.append("queryStr:");
    if (this.queryStr == null) {
      sb.append("null");
    } else {
      sb.append(this.queryStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalResults:");
    sb.append(this.totalResults);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shardInfo:");
    if (this.shardInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.shardInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptions:");
    if (this.exceptions == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realTime:");
    sb.append(this.realTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuTime:");
    sb.append(this.cpuTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

