/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FetchRecordResult implements org.apache.thrift.TBase<FetchRecordResult, FetchRecordResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchRecordResult");

  private static final org.apache.thrift.protocol.TField ROWID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RECORDID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("columnFamily", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("record", org.apache.thrift.protocol.TType.SET, (short)4);

  public String rowid;
  public String recordid;
  public String columnFamily;
  public Set<Column> record;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROWID((short)1, "rowid"),
    RECORDID((short)2, "recordid"),
    COLUMN_FAMILY((short)3, "columnFamily"),
    RECORD((short)4, "record");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROWID
          return ROWID;
        case 2: // RECORDID
          return RECORDID;
        case 3: // COLUMN_FAMILY
          return COLUMN_FAMILY;
        case 4: // RECORD
          return RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROWID, new org.apache.thrift.meta_data.FieldMetaData("rowid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORDID, new org.apache.thrift.meta_data.FieldMetaData("recordid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("columnFamily", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD, new org.apache.thrift.meta_data.FieldMetaData("record", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchRecordResult.class, metaDataMap);
  }

  public FetchRecordResult() {
  }

  public FetchRecordResult(
    String rowid,
    String recordid,
    String columnFamily,
    Set<Column> record)
  {
    this();
    this.rowid = rowid;
    this.recordid = recordid;
    this.columnFamily = columnFamily;
    this.record = record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchRecordResult(FetchRecordResult other) {
    if (other.isSetRowid()) {
      this.rowid = other.rowid;
    }
    if (other.isSetRecordid()) {
      this.recordid = other.recordid;
    }
    if (other.isSetColumnFamily()) {
      this.columnFamily = other.columnFamily;
    }
    if (other.isSetRecord()) {
      Set<Column> __this__record = new HashSet<Column>();
      for (Column other_element : other.record) {
        __this__record.add(new Column(other_element));
      }
      this.record = __this__record;
    }
  }

  public FetchRecordResult deepCopy() {
    return new FetchRecordResult(this);
  }

  @Override
  public void clear() {
    this.rowid = null;
    this.recordid = null;
    this.columnFamily = null;
    this.record = null;
  }

  public String getRowid() {
    return this.rowid;
  }

  public FetchRecordResult setRowid(String rowid) {
    this.rowid = rowid;
    return this;
  }

  public void unsetRowid() {
    this.rowid = null;
  }

  /** Returns true if field rowid is set (has been assigned a value) and false otherwise */
  public boolean isSetRowid() {
    return this.rowid != null;
  }

  public void setRowidIsSet(boolean value) {
    if (!value) {
      this.rowid = null;
    }
  }

  public String getRecordid() {
    return this.recordid;
  }

  public FetchRecordResult setRecordid(String recordid) {
    this.recordid = recordid;
    return this;
  }

  public void unsetRecordid() {
    this.recordid = null;
  }

  /** Returns true if field recordid is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordid() {
    return this.recordid != null;
  }

  public void setRecordidIsSet(boolean value) {
    if (!value) {
      this.recordid = null;
    }
  }

  public String getColumnFamily() {
    return this.columnFamily;
  }

  public FetchRecordResult setColumnFamily(String columnFamily) {
    this.columnFamily = columnFamily;
    return this;
  }

  public void unsetColumnFamily() {
    this.columnFamily = null;
  }

  /** Returns true if field columnFamily is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnFamily() {
    return this.columnFamily != null;
  }

  public void setColumnFamilyIsSet(boolean value) {
    if (!value) {
      this.columnFamily = null;
    }
  }

  public int getRecordSize() {
    return (this.record == null) ? 0 : this.record.size();
  }

  public java.util.Iterator<Column> getRecordIterator() {
    return (this.record == null) ? null : this.record.iterator();
  }

  public void addToRecord(Column elem) {
    if (this.record == null) {
      this.record = new HashSet<Column>();
    }
    this.record.add(elem);
  }

  public Set<Column> getRecord() {
    return this.record;
  }

  public FetchRecordResult setRecord(Set<Column> record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROWID:
      if (value == null) {
        unsetRowid();
      } else {
        setRowid((String)value);
      }
      break;

    case RECORDID:
      if (value == null) {
        unsetRecordid();
      } else {
        setRecordid((String)value);
      }
      break;

    case COLUMN_FAMILY:
      if (value == null) {
        unsetColumnFamily();
      } else {
        setColumnFamily((String)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((Set<Column>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROWID:
      return getRowid();

    case RECORDID:
      return getRecordid();

    case COLUMN_FAMILY:
      return getColumnFamily();

    case RECORD:
      return getRecord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROWID:
      return isSetRowid();
    case RECORDID:
      return isSetRecordid();
    case COLUMN_FAMILY:
      return isSetColumnFamily();
    case RECORD:
      return isSetRecord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchRecordResult)
      return this.equals((FetchRecordResult)that);
    return false;
  }

  public boolean equals(FetchRecordResult that) {
    if (that == null)
      return false;

    boolean this_present_rowid = true && this.isSetRowid();
    boolean that_present_rowid = true && that.isSetRowid();
    if (this_present_rowid || that_present_rowid) {
      if (!(this_present_rowid && that_present_rowid))
        return false;
      if (!this.rowid.equals(that.rowid))
        return false;
    }

    boolean this_present_recordid = true && this.isSetRecordid();
    boolean that_present_recordid = true && that.isSetRecordid();
    if (this_present_recordid || that_present_recordid) {
      if (!(this_present_recordid && that_present_recordid))
        return false;
      if (!this.recordid.equals(that.recordid))
        return false;
    }

    boolean this_present_columnFamily = true && this.isSetColumnFamily();
    boolean that_present_columnFamily = true && that.isSetColumnFamily();
    if (this_present_columnFamily || that_present_columnFamily) {
      if (!(this_present_columnFamily && that_present_columnFamily))
        return false;
      if (!this.columnFamily.equals(that.columnFamily))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FetchRecordResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FetchRecordResult typedOther = (FetchRecordResult)other;

    lastComparison = Boolean.valueOf(isSetRowid()).compareTo(typedOther.isSetRowid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowid, typedOther.rowid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordid()).compareTo(typedOther.isSetRecordid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordid, typedOther.recordid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnFamily()).compareTo(typedOther.isSetColumnFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnFamily, typedOther.columnFamily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(typedOther.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record, typedOther.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ROWID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.rowid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RECORDID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.recordid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COLUMN_FAMILY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.columnFamily = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RECORD
          if (field.type == org.apache.thrift.protocol.TType.SET) {
            {
              org.apache.thrift.protocol.TSet _set45 = iprot.readSetBegin();
              this.record = new HashSet<Column>(2*_set45.size);
              for (int _i46 = 0; _i46 < _set45.size; ++_i46)
              {
                Column _elem47;
                _elem47 = new Column();
                _elem47.read(iprot);
                this.record.add(_elem47);
              }
              iprot.readSetEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.rowid != null) {
      oprot.writeFieldBegin(ROWID_FIELD_DESC);
      oprot.writeString(this.rowid);
      oprot.writeFieldEnd();
    }
    if (this.recordid != null) {
      oprot.writeFieldBegin(RECORDID_FIELD_DESC);
      oprot.writeString(this.recordid);
      oprot.writeFieldEnd();
    }
    if (this.columnFamily != null) {
      oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
      oprot.writeString(this.columnFamily);
      oprot.writeFieldEnd();
    }
    if (this.record != null) {
      oprot.writeFieldBegin(RECORD_FIELD_DESC);
      {
        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, this.record.size()));
        for (Column _iter48 : this.record)
        {
          _iter48.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchRecordResult(");
    boolean first = true;

    sb.append("rowid:");
    if (this.rowid == null) {
      sb.append("null");
    } else {
      sb.append(this.rowid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordid:");
    if (this.recordid == null) {
      sb.append("null");
    } else {
      sb.append(this.recordid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnFamily:");
    if (this.columnFamily == null) {
      sb.append("null");
    } else {
      sb.append(this.columnFamily);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

