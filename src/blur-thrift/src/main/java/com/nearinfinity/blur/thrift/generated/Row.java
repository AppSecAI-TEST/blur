/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Row implements TBase<Row, Row._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Row");

  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField COLUMN_FAMILIES_FIELD_DESC = new TField("columnFamilies", TType.SET, (short)2);
  private static final TField WAL_DISABLED_FIELD_DESC = new TField("walDisabled", TType.BOOL, (short)3);

  public String id;
  public Set<ColumnFamily> columnFamilies;
  public boolean walDisabled;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    COLUMN_FAMILIES((short)2, "columnFamilies"),
    WAL_DISABLED((short)3, "walDisabled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COLUMN_FAMILIES
          return COLUMN_FAMILIES;
        case 3: // WAL_DISABLED
          return WAL_DISABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WALDISABLED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COLUMN_FAMILIES, new FieldMetaData("columnFamilies", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, ColumnFamily.class))));
    tmpMap.put(_Fields.WAL_DISABLED, new FieldMetaData("walDisabled", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Row.class, metaDataMap);
  }

  public Row() {
  }

  public Row(
    String id,
    Set<ColumnFamily> columnFamilies,
    boolean walDisabled)
  {
    this();
    this.id = id;
    this.columnFamilies = columnFamilies;
    this.walDisabled = walDisabled;
    setWalDisabledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Row(Row other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetColumnFamilies()) {
      Set<ColumnFamily> __this__columnFamilies = new HashSet<ColumnFamily>();
      for (ColumnFamily other_element : other.columnFamilies) {
        __this__columnFamilies.add(new ColumnFamily(other_element));
      }
      this.columnFamilies = __this__columnFamilies;
    }
    this.walDisabled = other.walDisabled;
  }

  public Row deepCopy() {
    return new Row(this);
  }

  @Deprecated
  public Row clone() {
    return new Row(this);
  }

  public String getId() {
    return this.id;
  }

  public Row setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getColumnFamiliesSize() {
    return (this.columnFamilies == null) ? 0 : this.columnFamilies.size();
  }

  public java.util.Iterator<ColumnFamily> getColumnFamiliesIterator() {
    return (this.columnFamilies == null) ? null : this.columnFamilies.iterator();
  }

  public void addToColumnFamilies(ColumnFamily elem) {
    if (this.columnFamilies == null) {
      this.columnFamilies = new HashSet<ColumnFamily>();
    }
    this.columnFamilies.add(elem);
  }

  public Set<ColumnFamily> getColumnFamilies() {
    return this.columnFamilies;
  }

  public Row setColumnFamilies(Set<ColumnFamily> columnFamilies) {
    this.columnFamilies = columnFamilies;
    return this;
  }

  public void unsetColumnFamilies() {
    this.columnFamilies = null;
  }

  /** Returns true if field columnFamilies is set (has been asigned a value) and false otherwise */
  public boolean isSetColumnFamilies() {
    return this.columnFamilies != null;
  }

  public void setColumnFamiliesIsSet(boolean value) {
    if (!value) {
      this.columnFamilies = null;
    }
  }

  public boolean isWalDisabled() {
    return this.walDisabled;
  }

  public Row setWalDisabled(boolean walDisabled) {
    this.walDisabled = walDisabled;
    setWalDisabledIsSet(true);
    return this;
  }

  public void unsetWalDisabled() {
    __isset_bit_vector.clear(__WALDISABLED_ISSET_ID);
  }

  /** Returns true if field walDisabled is set (has been asigned a value) and false otherwise */
  public boolean isSetWalDisabled() {
    return __isset_bit_vector.get(__WALDISABLED_ISSET_ID);
  }

  public void setWalDisabledIsSet(boolean value) {
    __isset_bit_vector.set(__WALDISABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case COLUMN_FAMILIES:
      if (value == null) {
        unsetColumnFamilies();
      } else {
        setColumnFamilies((Set<ColumnFamily>)value);
      }
      break;

    case WAL_DISABLED:
      if (value == null) {
        unsetWalDisabled();
      } else {
        setWalDisabled((Boolean)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COLUMN_FAMILIES:
      return getColumnFamilies();

    case WAL_DISABLED:
      return new Boolean(isWalDisabled());

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case ID:
      return isSetId();
    case COLUMN_FAMILIES:
      return isSetColumnFamilies();
    case WAL_DISABLED:
      return isSetWalDisabled();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Row)
      return this.equals((Row)that);
    return false;
  }

  public boolean equals(Row that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_columnFamilies = true && this.isSetColumnFamilies();
    boolean that_present_columnFamilies = true && that.isSetColumnFamilies();
    if (this_present_columnFamilies || that_present_columnFamilies) {
      if (!(this_present_columnFamilies && that_present_columnFamilies))
        return false;
      if (!this.columnFamilies.equals(that.columnFamilies))
        return false;
    }

    boolean this_present_walDisabled = true;
    boolean that_present_walDisabled = true;
    if (this_present_walDisabled || that_present_walDisabled) {
      if (!(this_present_walDisabled && that_present_walDisabled))
        return false;
      if (this.walDisabled != that.walDisabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Row other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Row typedOther = (Row)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnFamilies()).compareTo(typedOther.isSetColumnFamilies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnFamilies()) {      lastComparison = TBaseHelper.compareTo(this.columnFamilies, typedOther.columnFamilies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWalDisabled()).compareTo(typedOther.isSetWalDisabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalDisabled()) {      lastComparison = TBaseHelper.compareTo(this.walDisabled, typedOther.walDisabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COLUMN_FAMILIES
          if (field.type == TType.SET) {
            {
              TSet _set30 = iprot.readSetBegin();
              this.columnFamilies = new HashSet<ColumnFamily>(2*_set30.size);
              for (int _i31 = 0; _i31 < _set30.size; ++_i31)
              {
                ColumnFamily _elem32;
                _elem32 = new ColumnFamily();
                _elem32.read(iprot);
                this.columnFamilies.add(_elem32);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WAL_DISABLED
          if (field.type == TType.BOOL) {
            this.walDisabled = iprot.readBool();
            setWalDisabledIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.columnFamilies != null) {
      oprot.writeFieldBegin(COLUMN_FAMILIES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.columnFamilies.size()));
        for (ColumnFamily _iter33 : this.columnFamilies)
        {
          _iter33.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WAL_DISABLED_FIELD_DESC);
    oprot.writeBool(this.walDisabled);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Row(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnFamilies:");
    if (this.columnFamilies == null) {
      sb.append("null");
    } else {
      sb.append(this.columnFamilies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("walDisabled:");
    sb.append(this.walDisabled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

