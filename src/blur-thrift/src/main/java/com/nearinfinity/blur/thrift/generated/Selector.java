/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Selector implements TBase<Selector, Selector._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Selector");

  private static final TField LOCATION_ID_FIELD_DESC = new TField("locationId", TType.STRING, (short)1);
  private static final TField RECORD_ONLY_FIELD_DESC = new TField("recordOnly", TType.BOOL, (short)2);
  private static final TField COLUMN_FAMILIES_FIELD_DESC = new TField("columnFamilies", TType.SET, (short)3);
  private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.MAP, (short)4);

  public String locationId;
  public boolean recordOnly;
  public Set<String> columnFamilies;
  public Map<String,Set<String>> columns;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOCATION_ID((short)1, "locationId"),
    RECORD_ONLY((short)2, "recordOnly"),
    COLUMN_FAMILIES((short)3, "columnFamilies"),
    COLUMNS((short)4, "columns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION_ID
          return LOCATION_ID;
        case 2: // RECORD_ONLY
          return RECORD_ONLY;
        case 3: // COLUMN_FAMILIES
          return COLUMN_FAMILIES;
        case 4: // COLUMNS
          return COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORDONLY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION_ID, new FieldMetaData("locationId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RECORD_ONLY, new FieldMetaData("recordOnly", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_FAMILIES, new FieldMetaData("columnFamilies", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Selector.class, metaDataMap);
  }

  public Selector() {
  }

  public Selector(
    String locationId,
    boolean recordOnly,
    Set<String> columnFamilies,
    Map<String,Set<String>> columns)
  {
    this();
    this.locationId = locationId;
    this.recordOnly = recordOnly;
    setRecordOnlyIsSet(true);
    this.columnFamilies = columnFamilies;
    this.columns = columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Selector(Selector other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetLocationId()) {
      this.locationId = other.locationId;
    }
    this.recordOnly = other.recordOnly;
    if (other.isSetColumnFamilies()) {
      Set<String> __this__columnFamilies = new HashSet<String>();
      for (String other_element : other.columnFamilies) {
        __this__columnFamilies.add(other_element);
      }
      this.columnFamilies = __this__columnFamilies;
    }
    if (other.isSetColumns()) {
      Map<String,Set<String>> __this__columns = new HashMap<String,Set<String>>();
      for (Map.Entry<String, Set<String>> other_element : other.columns.entrySet()) {

        String other_element_key = other_element.getKey();
        Set<String> other_element_value = other_element.getValue();

        String __this__columns_copy_key = other_element_key;

        Set<String> __this__columns_copy_value = new HashSet<String>();
        for (String other_element_value_element : other_element_value) {
          __this__columns_copy_value.add(other_element_value_element);
        }

        __this__columns.put(__this__columns_copy_key, __this__columns_copy_value);
      }
      this.columns = __this__columns;
    }
  }

  public Selector deepCopy() {
    return new Selector(this);
  }

  @Deprecated
  public Selector clone() {
    return new Selector(this);
  }

  public String getLocationId() {
    return this.locationId;
  }

  public Selector setLocationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  public void unsetLocationId() {
    this.locationId = null;
  }

  /** Returns true if field locationId is set (has been asigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return this.locationId != null;
  }

  public void setLocationIdIsSet(boolean value) {
    if (!value) {
      this.locationId = null;
    }
  }

  public boolean isRecordOnly() {
    return this.recordOnly;
  }

  public Selector setRecordOnly(boolean recordOnly) {
    this.recordOnly = recordOnly;
    setRecordOnlyIsSet(true);
    return this;
  }

  public void unsetRecordOnly() {
    __isset_bit_vector.clear(__RECORDONLY_ISSET_ID);
  }

  /** Returns true if field recordOnly is set (has been asigned a value) and false otherwise */
  public boolean isSetRecordOnly() {
    return __isset_bit_vector.get(__RECORDONLY_ISSET_ID);
  }

  public void setRecordOnlyIsSet(boolean value) {
    __isset_bit_vector.set(__RECORDONLY_ISSET_ID, value);
  }

  public int getColumnFamiliesSize() {
    return (this.columnFamilies == null) ? 0 : this.columnFamilies.size();
  }

  public java.util.Iterator<String> getColumnFamiliesIterator() {
    return (this.columnFamilies == null) ? null : this.columnFamilies.iterator();
  }

  public void addToColumnFamilies(String elem) {
    if (this.columnFamilies == null) {
      this.columnFamilies = new HashSet<String>();
    }
    this.columnFamilies.add(elem);
  }

  public Set<String> getColumnFamilies() {
    return this.columnFamilies;
  }

  public Selector setColumnFamilies(Set<String> columnFamilies) {
    this.columnFamilies = columnFamilies;
    return this;
  }

  public void unsetColumnFamilies() {
    this.columnFamilies = null;
  }

  /** Returns true if field columnFamilies is set (has been asigned a value) and false otherwise */
  public boolean isSetColumnFamilies() {
    return this.columnFamilies != null;
  }

  public void setColumnFamiliesIsSet(boolean value) {
    if (!value) {
      this.columnFamilies = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public void putToColumns(String key, Set<String> val) {
    if (this.columns == null) {
      this.columns = new HashMap<String,Set<String>>();
    }
    this.columns.put(key, val);
  }

  public Map<String,Set<String>> getColumns() {
    return this.columns;
  }

  public Selector setColumns(Map<String,Set<String>> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been asigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((String)value);
      }
      break;

    case RECORD_ONLY:
      if (value == null) {
        unsetRecordOnly();
      } else {
        setRecordOnly((Boolean)value);
      }
      break;

    case COLUMN_FAMILIES:
      if (value == null) {
        unsetColumnFamilies();
      } else {
        setColumnFamilies((Set<String>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((Map<String,Set<String>>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION_ID:
      return getLocationId();

    case RECORD_ONLY:
      return new Boolean(isRecordOnly());

    case COLUMN_FAMILIES:
      return getColumnFamilies();

    case COLUMNS:
      return getColumns();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case LOCATION_ID:
      return isSetLocationId();
    case RECORD_ONLY:
      return isSetRecordOnly();
    case COLUMN_FAMILIES:
      return isSetColumnFamilies();
    case COLUMNS:
      return isSetColumns();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Selector)
      return this.equals((Selector)that);
    return false;
  }

  public boolean equals(Selector that) {
    if (that == null)
      return false;

    boolean this_present_locationId = true && this.isSetLocationId();
    boolean that_present_locationId = true && that.isSetLocationId();
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (!this.locationId.equals(that.locationId))
        return false;
    }

    boolean this_present_recordOnly = true;
    boolean that_present_recordOnly = true;
    if (this_present_recordOnly || that_present_recordOnly) {
      if (!(this_present_recordOnly && that_present_recordOnly))
        return false;
      if (this.recordOnly != that.recordOnly)
        return false;
    }

    boolean this_present_columnFamilies = true && this.isSetColumnFamilies();
    boolean that_present_columnFamilies = true && that.isSetColumnFamilies();
    if (this_present_columnFamilies || that_present_columnFamilies) {
      if (!(this_present_columnFamilies && that_present_columnFamilies))
        return false;
      if (!this.columnFamilies.equals(that.columnFamilies))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Selector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Selector typedOther = (Selector)other;

    lastComparison = Boolean.valueOf(isSetLocationId()).compareTo(typedOther.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {      lastComparison = TBaseHelper.compareTo(this.locationId, typedOther.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordOnly()).compareTo(typedOther.isSetRecordOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordOnly()) {      lastComparison = TBaseHelper.compareTo(this.recordOnly, typedOther.recordOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnFamilies()).compareTo(typedOther.isSetColumnFamilies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnFamilies()) {      lastComparison = TBaseHelper.compareTo(this.columnFamilies, typedOther.columnFamilies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // LOCATION_ID
          if (field.type == TType.STRING) {
            this.locationId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RECORD_ONLY
          if (field.type == TType.BOOL) {
            this.recordOnly = iprot.readBool();
            setRecordOnlyIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COLUMN_FAMILIES
          if (field.type == TType.SET) {
            {
              TSet _set38 = iprot.readSetBegin();
              this.columnFamilies = new HashSet<String>(2*_set38.size);
              for (int _i39 = 0; _i39 < _set38.size; ++_i39)
              {
                String _elem40;
                _elem40 = iprot.readString();
                this.columnFamilies.add(_elem40);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COLUMNS
          if (field.type == TType.MAP) {
            {
              TMap _map41 = iprot.readMapBegin();
              this.columns = new HashMap<String,Set<String>>(2*_map41.size);
              for (int _i42 = 0; _i42 < _map41.size; ++_i42)
              {
                String _key43;
                Set<String> _val44;
                _key43 = iprot.readString();
                {
                  TSet _set45 = iprot.readSetBegin();
                  _val44 = new HashSet<String>(2*_set45.size);
                  for (int _i46 = 0; _i46 < _set45.size; ++_i46)
                  {
                    String _elem47;
                    _elem47 = iprot.readString();
                    _val44.add(_elem47);
                  }
                  iprot.readSetEnd();
                }
                this.columns.put(_key43, _val44);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.locationId != null) {
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeString(this.locationId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RECORD_ONLY_FIELD_DESC);
    oprot.writeBool(this.recordOnly);
    oprot.writeFieldEnd();
    if (this.columnFamilies != null) {
      oprot.writeFieldBegin(COLUMN_FAMILIES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.columnFamilies.size()));
        for (String _iter48 : this.columnFamilies)
        {
          oprot.writeString(_iter48);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.SET, this.columns.size()));
        for (Map.Entry<String, Set<String>> _iter49 : this.columns.entrySet())
        {
          oprot.writeString(_iter49.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.STRING, _iter49.getValue().size()));
            for (String _iter50 : _iter49.getValue())
            {
              oprot.writeString(_iter50);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Selector(");
    boolean first = true;

    sb.append("locationId:");
    if (this.locationId == null) {
      sb.append("null");
    } else {
      sb.append(this.locationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordOnly:");
    sb.append(this.recordOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnFamilies:");
    if (this.columnFamilies == null) {
      sb.append("null");
    } else {
      sb.append(this.columnFamilies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

