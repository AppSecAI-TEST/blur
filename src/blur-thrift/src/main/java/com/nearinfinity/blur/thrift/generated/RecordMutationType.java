/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * Specifies the type of Record mutation that should occur during
 * a mutation of a given Record.
 */
public enum RecordMutationType implements org.apache.thrift.TEnum {
  /**
   * Indicates the Record with the given recordId in the given Row
   * is to be deleted.
   */
  DELETE_ENTIRE_RECORD(0),
  /**
   * Indicates the Record with the given recordId in the given Row
   * is to be deleted, and a new Record with the same id is to be added.
   */
  REPLACE_ENTIRE_RECORD(1),
  /**
   * Replace the columns that are specified in the Record mutation.
   */
  REPLACE_COLUMNS(2),
  /**
   * Append the columns in the Record mutation to the Record that
   * could already exist.
   */
  APPEND_COLUMN_VALUES(3);

  private final int value;

  private RecordMutationType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static RecordMutationType findByValue(int value) { 
    switch (value) {
      case 0:
        return DELETE_ENTIRE_RECORD;
      case 1:
        return REPLACE_ENTIRE_RECORD;
      case 2:
        return REPLACE_COLUMNS;
      case 3:
        return APPEND_COLUMN_VALUES;
      default:
        return null;
    }
  }
}
