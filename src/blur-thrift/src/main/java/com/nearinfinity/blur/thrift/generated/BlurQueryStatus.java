/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BlurQueryStatus implements org.apache.thrift.TBase<BlurQueryStatus, BlurQueryStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlurQueryStatus");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("realTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("running", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INTERRUPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("interrupted", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.I64, (short)7);

  public BlurQuery query;
  public long realTime;
  public long cpuTime;
  public double complete;
  public boolean running;
  public boolean interrupted;
  public long uuid;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    REAL_TIME((short)2, "realTime"),
    CPU_TIME((short)3, "cpuTime"),
    COMPLETE((short)4, "complete"),
    RUNNING((short)5, "running"),
    INTERRUPTED((short)6, "interrupted"),
    UUID((short)7, "uuid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // REAL_TIME
          return REAL_TIME;
        case 3: // CPU_TIME
          return CPU_TIME;
        case 4: // COMPLETE
          return COMPLETE;
        case 5: // RUNNING
          return RUNNING;
        case 6: // INTERRUPTED
          return INTERRUPTED;
        case 7: // UUID
          return UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REALTIME_ISSET_ID = 0;
  private static final int __CPUTIME_ISSET_ID = 1;
  private static final int __COMPLETE_ISSET_ID = 2;
  private static final int __RUNNING_ISSET_ID = 3;
  private static final int __INTERRUPTED_ISSET_ID = 4;
  private static final int __UUID_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlurQuery.class)));
    tmpMap.put(_Fields.REAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("realTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("cpuTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RUNNING, new org.apache.thrift.meta_data.FieldMetaData("running", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INTERRUPTED, new org.apache.thrift.meta_data.FieldMetaData("interrupted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlurQueryStatus.class, metaDataMap);
  }

  public BlurQueryStatus() {
  }

  public BlurQueryStatus(
    BlurQuery query,
    long realTime,
    long cpuTime,
    double complete,
    boolean running,
    boolean interrupted,
    long uuid)
  {
    this();
    this.query = query;
    this.realTime = realTime;
    setRealTimeIsSet(true);
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    this.complete = complete;
    setCompleteIsSet(true);
    this.running = running;
    setRunningIsSet(true);
    this.interrupted = interrupted;
    setInterruptedIsSet(true);
    this.uuid = uuid;
    setUuidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlurQueryStatus(BlurQueryStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = new BlurQuery(other.query);
    }
    this.realTime = other.realTime;
    this.cpuTime = other.cpuTime;
    this.complete = other.complete;
    this.running = other.running;
    this.interrupted = other.interrupted;
    this.uuid = other.uuid;
  }

  public BlurQueryStatus deepCopy() {
    return new BlurQueryStatus(this);
  }

  @Override
  public void clear() {
    this.query = null;
    setRealTimeIsSet(false);
    this.realTime = 0;
    setCpuTimeIsSet(false);
    this.cpuTime = 0;
    setCompleteIsSet(false);
    this.complete = 0.0;
    setRunningIsSet(false);
    this.running = false;
    setInterruptedIsSet(false);
    this.interrupted = false;
    setUuidIsSet(false);
    this.uuid = 0;
  }

  public BlurQuery getQuery() {
    return this.query;
  }

  public BlurQueryStatus setQuery(BlurQuery query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public long getRealTime() {
    return this.realTime;
  }

  public BlurQueryStatus setRealTime(long realTime) {
    this.realTime = realTime;
    setRealTimeIsSet(true);
    return this;
  }

  public void unsetRealTime() {
    __isset_bit_vector.clear(__REALTIME_ISSET_ID);
  }

  /** Returns true if field realTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTime() {
    return __isset_bit_vector.get(__REALTIME_ISSET_ID);
  }

  public void setRealTimeIsSet(boolean value) {
    __isset_bit_vector.set(__REALTIME_ISSET_ID, value);
  }

  public long getCpuTime() {
    return this.cpuTime;
  }

  public BlurQueryStatus setCpuTime(long cpuTime) {
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    return this;
  }

  public void unsetCpuTime() {
    __isset_bit_vector.clear(__CPUTIME_ISSET_ID);
  }

  /** Returns true if field cpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuTime() {
    return __isset_bit_vector.get(__CPUTIME_ISSET_ID);
  }

  public void setCpuTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CPUTIME_ISSET_ID, value);
  }

  public double getComplete() {
    return this.complete;
  }

  public BlurQueryStatus setComplete(double complete) {
    this.complete = complete;
    setCompleteIsSet(true);
    return this;
  }

  public void unsetComplete() {
    __isset_bit_vector.clear(__COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return __isset_bit_vector.get(__COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bit_vector.set(__COMPLETE_ISSET_ID, value);
  }

  public boolean isRunning() {
    return this.running;
  }

  public BlurQueryStatus setRunning(boolean running) {
    this.running = running;
    setRunningIsSet(true);
    return this;
  }

  public void unsetRunning() {
    __isset_bit_vector.clear(__RUNNING_ISSET_ID);
  }

  /** Returns true if field running is set (has been assigned a value) and false otherwise */
  public boolean isSetRunning() {
    return __isset_bit_vector.get(__RUNNING_ISSET_ID);
  }

  public void setRunningIsSet(boolean value) {
    __isset_bit_vector.set(__RUNNING_ISSET_ID, value);
  }

  public boolean isInterrupted() {
    return this.interrupted;
  }

  public BlurQueryStatus setInterrupted(boolean interrupted) {
    this.interrupted = interrupted;
    setInterruptedIsSet(true);
    return this;
  }

  public void unsetInterrupted() {
    __isset_bit_vector.clear(__INTERRUPTED_ISSET_ID);
  }

  /** Returns true if field interrupted is set (has been assigned a value) and false otherwise */
  public boolean isSetInterrupted() {
    return __isset_bit_vector.get(__INTERRUPTED_ISSET_ID);
  }

  public void setInterruptedIsSet(boolean value) {
    __isset_bit_vector.set(__INTERRUPTED_ISSET_ID, value);
  }

  public long getUuid() {
    return this.uuid;
  }

  public BlurQueryStatus setUuid(long uuid) {
    this.uuid = uuid;
    setUuidIsSet(true);
    return this;
  }

  public void unsetUuid() {
    __isset_bit_vector.clear(__UUID_ISSET_ID);
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return __isset_bit_vector.get(__UUID_ISSET_ID);
  }

  public void setUuidIsSet(boolean value) {
    __isset_bit_vector.set(__UUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((BlurQuery)value);
      }
      break;

    case REAL_TIME:
      if (value == null) {
        unsetRealTime();
      } else {
        setRealTime((Long)value);
      }
      break;

    case CPU_TIME:
      if (value == null) {
        unsetCpuTime();
      } else {
        setCpuTime((Long)value);
      }
      break;

    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Double)value);
      }
      break;

    case RUNNING:
      if (value == null) {
        unsetRunning();
      } else {
        setRunning((Boolean)value);
      }
      break;

    case INTERRUPTED:
      if (value == null) {
        unsetInterrupted();
      } else {
        setInterrupted((Boolean)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case REAL_TIME:
      return new Long(getRealTime());

    case CPU_TIME:
      return new Long(getCpuTime());

    case COMPLETE:
      return new Double(getComplete());

    case RUNNING:
      return new Boolean(isRunning());

    case INTERRUPTED:
      return new Boolean(isInterrupted());

    case UUID:
      return new Long(getUuid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case REAL_TIME:
      return isSetRealTime();
    case CPU_TIME:
      return isSetCpuTime();
    case COMPLETE:
      return isSetComplete();
    case RUNNING:
      return isSetRunning();
    case INTERRUPTED:
      return isSetInterrupted();
    case UUID:
      return isSetUuid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlurQueryStatus)
      return this.equals((BlurQueryStatus)that);
    return false;
  }

  public boolean equals(BlurQueryStatus that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_realTime = true;
    boolean that_present_realTime = true;
    if (this_present_realTime || that_present_realTime) {
      if (!(this_present_realTime && that_present_realTime))
        return false;
      if (this.realTime != that.realTime)
        return false;
    }

    boolean this_present_cpuTime = true;
    boolean that_present_cpuTime = true;
    if (this_present_cpuTime || that_present_cpuTime) {
      if (!(this_present_cpuTime && that_present_cpuTime))
        return false;
      if (this.cpuTime != that.cpuTime)
        return false;
    }

    boolean this_present_complete = true;
    boolean that_present_complete = true;
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_running = true;
    boolean that_present_running = true;
    if (this_present_running || that_present_running) {
      if (!(this_present_running && that_present_running))
        return false;
      if (this.running != that.running)
        return false;
    }

    boolean this_present_interrupted = true;
    boolean that_present_interrupted = true;
    if (this_present_interrupted || that_present_interrupted) {
      if (!(this_present_interrupted && that_present_interrupted))
        return false;
      if (this.interrupted != that.interrupted)
        return false;
    }

    boolean this_present_uuid = true;
    boolean that_present_uuid = true;
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (this.uuid != that.uuid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlurQueryStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlurQueryStatus typedOther = (BlurQueryStatus)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealTime()).compareTo(typedOther.isSetRealTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTime, typedOther.realTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuTime()).compareTo(typedOther.isSetCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuTime, typedOther.cpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(typedOther.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, typedOther.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunning()).compareTo(typedOther.isSetRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.running, typedOther.running);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterrupted()).compareTo(typedOther.isSetInterrupted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterrupted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interrupted, typedOther.interrupted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.query = new BlurQuery();
            this.query.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REAL_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.realTime = iprot.readI64();
            setRealTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CPU_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.cpuTime = iprot.readI64();
            setCpuTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COMPLETE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.complete = iprot.readDouble();
            setCompleteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RUNNING
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.running = iprot.readBool();
            setRunningIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // INTERRUPTED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.interrupted = iprot.readBool();
            setInterruptedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // UUID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.uuid = iprot.readI64();
            setUuidIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.query != null) {
      oprot.writeFieldBegin(QUERY_FIELD_DESC);
      this.query.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REAL_TIME_FIELD_DESC);
    oprot.writeI64(this.realTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CPU_TIME_FIELD_DESC);
    oprot.writeI64(this.cpuTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
    oprot.writeDouble(this.complete);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RUNNING_FIELD_DESC);
    oprot.writeBool(this.running);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INTERRUPTED_FIELD_DESC);
    oprot.writeBool(this.interrupted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UUID_FIELD_DESC);
    oprot.writeI64(this.uuid);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlurQueryStatus(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realTime:");
    sb.append(this.realTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuTime:");
    sb.append(this.cpuTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete:");
    sb.append(this.complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("running:");
    sb.append(this.running);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interrupted:");
    sb.append(this.interrupted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    sb.append(this.uuid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

