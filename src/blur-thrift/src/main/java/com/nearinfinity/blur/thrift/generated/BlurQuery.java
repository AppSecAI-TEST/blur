/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BlurQuery implements org.apache.thrift.TBase<BlurQuery, BlurQuery._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlurQuery");

  private static final org.apache.thrift.protocol.TField QUERY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStr", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUPER_QUERY_ON_FIELD_DESC = new org.apache.thrift.protocol.TField("superQueryOn", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POST_SUPER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("postSuperFilter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_SUPER_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("preSuperFilter", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FETCH_FIELD_DESC = new org.apache.thrift.protocol.TField("fetch", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MINIMUM_NUMBER_OF_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("minimumNumberOfResults", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_QUERY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxQueryTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RESOLVE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("resolveIds", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField FACETS_FIELD_DESC = new org.apache.thrift.protocol.TField("facets", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SELECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("selector", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField CACHE_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheOnly", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField ALLOW_STALE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("allowStaleData", org.apache.thrift.protocol.TType.BOOL, (short)17);

  public String queryStr; // required
  public boolean superQueryOn; // required
  /**
   * 
   * @see ScoreType
   */
  public ScoreType type; // required
  public String postSuperFilter; // required
  public String preSuperFilter; // required
  public long start; // required
  public int fetch; // required
  public long minimumNumberOfResults; // required
  public long maxQueryTime; // required
  public long uuid; // required
  public String userId; // required
  public boolean resolveIds; // required
  public List<Facet> facets; // required
  public Selector selector; // required
  public long startTime; // required
  public boolean cacheOnly; // required
  public boolean allowStaleData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_STR((short)1, "queryStr"),
    SUPER_QUERY_ON((short)2, "superQueryOn"),
    /**
     * 
     * @see ScoreType
     */
    TYPE((short)3, "type"),
    POST_SUPER_FILTER((short)4, "postSuperFilter"),
    PRE_SUPER_FILTER((short)5, "preSuperFilter"),
    START((short)6, "start"),
    FETCH((short)7, "fetch"),
    MINIMUM_NUMBER_OF_RESULTS((short)8, "minimumNumberOfResults"),
    MAX_QUERY_TIME((short)9, "maxQueryTime"),
    UUID((short)10, "uuid"),
    USER_ID((short)11, "userId"),
    RESOLVE_IDS((short)12, "resolveIds"),
    FACETS((short)13, "facets"),
    SELECTOR((short)14, "selector"),
    START_TIME((short)15, "startTime"),
    CACHE_ONLY((short)16, "cacheOnly"),
    ALLOW_STALE_DATA((short)17, "allowStaleData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_STR
          return QUERY_STR;
        case 2: // SUPER_QUERY_ON
          return SUPER_QUERY_ON;
        case 3: // TYPE
          return TYPE;
        case 4: // POST_SUPER_FILTER
          return POST_SUPER_FILTER;
        case 5: // PRE_SUPER_FILTER
          return PRE_SUPER_FILTER;
        case 6: // START
          return START;
        case 7: // FETCH
          return FETCH;
        case 8: // MINIMUM_NUMBER_OF_RESULTS
          return MINIMUM_NUMBER_OF_RESULTS;
        case 9: // MAX_QUERY_TIME
          return MAX_QUERY_TIME;
        case 10: // UUID
          return UUID;
        case 11: // USER_ID
          return USER_ID;
        case 12: // RESOLVE_IDS
          return RESOLVE_IDS;
        case 13: // FACETS
          return FACETS;
        case 14: // SELECTOR
          return SELECTOR;
        case 15: // START_TIME
          return START_TIME;
        case 16: // CACHE_ONLY
          return CACHE_ONLY;
        case 17: // ALLOW_STALE_DATA
          return ALLOW_STALE_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUPERQUERYON_ISSET_ID = 0;
  private static final int __START_ISSET_ID = 1;
  private static final int __FETCH_ISSET_ID = 2;
  private static final int __MINIMUMNUMBEROFRESULTS_ISSET_ID = 3;
  private static final int __MAXQUERYTIME_ISSET_ID = 4;
  private static final int __UUID_ISSET_ID = 5;
  private static final int __RESOLVEIDS_ISSET_ID = 6;
  private static final int __STARTTIME_ISSET_ID = 7;
  private static final int __CACHEONLY_ISSET_ID = 8;
  private static final int __ALLOWSTALEDATA_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_STR, new org.apache.thrift.meta_data.FieldMetaData("queryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPER_QUERY_ON, new org.apache.thrift.meta_data.FieldMetaData("superQueryOn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ScoreType.class)));
    tmpMap.put(_Fields.POST_SUPER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("postSuperFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_SUPER_FILTER, new org.apache.thrift.meta_data.FieldMetaData("preSuperFilter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH, new org.apache.thrift.meta_data.FieldMetaData("fetch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINIMUM_NUMBER_OF_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("minimumNumberOfResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_QUERY_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxQueryTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLVE_IDS, new org.apache.thrift.meta_data.FieldMetaData("resolveIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FACETS, new org.apache.thrift.meta_data.FieldMetaData("facets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Facet.class))));
    tmpMap.put(_Fields.SELECTOR, new org.apache.thrift.meta_data.FieldMetaData("selector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Selector.class)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_ONLY, new org.apache.thrift.meta_data.FieldMetaData("cacheOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_STALE_DATA, new org.apache.thrift.meta_data.FieldMetaData("allowStaleData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlurQuery.class, metaDataMap);
  }

  public BlurQuery() {
    this.superQueryOn = true;

    this.type = com.nearinfinity.blur.thrift.generated.ScoreType.SUPER;

    this.start = 0L;

    this.fetch = 10;

    this.minimumNumberOfResults = 9223372036854775807L;

    this.maxQueryTime = 9223372036854775807L;

    this.cacheOnly = false;

  }

  public BlurQuery(
    String queryStr,
    boolean superQueryOn,
    ScoreType type,
    String postSuperFilter,
    String preSuperFilter,
    long start,
    int fetch,
    long minimumNumberOfResults,
    long maxQueryTime,
    long uuid,
    String userId,
    boolean resolveIds,
    List<Facet> facets,
    Selector selector,
    long startTime,
    boolean cacheOnly,
    boolean allowStaleData)
  {
    this();
    this.queryStr = queryStr;
    this.superQueryOn = superQueryOn;
    setSuperQueryOnIsSet(true);
    this.type = type;
    this.postSuperFilter = postSuperFilter;
    this.preSuperFilter = preSuperFilter;
    this.start = start;
    setStartIsSet(true);
    this.fetch = fetch;
    setFetchIsSet(true);
    this.minimumNumberOfResults = minimumNumberOfResults;
    setMinimumNumberOfResultsIsSet(true);
    this.maxQueryTime = maxQueryTime;
    setMaxQueryTimeIsSet(true);
    this.uuid = uuid;
    setUuidIsSet(true);
    this.userId = userId;
    this.resolveIds = resolveIds;
    setResolveIdsIsSet(true);
    this.facets = facets;
    this.selector = selector;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.cacheOnly = cacheOnly;
    setCacheOnlyIsSet(true);
    this.allowStaleData = allowStaleData;
    setAllowStaleDataIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlurQuery(BlurQuery other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQueryStr()) {
      this.queryStr = other.queryStr;
    }
    this.superQueryOn = other.superQueryOn;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPostSuperFilter()) {
      this.postSuperFilter = other.postSuperFilter;
    }
    if (other.isSetPreSuperFilter()) {
      this.preSuperFilter = other.preSuperFilter;
    }
    this.start = other.start;
    this.fetch = other.fetch;
    this.minimumNumberOfResults = other.minimumNumberOfResults;
    this.maxQueryTime = other.maxQueryTime;
    this.uuid = other.uuid;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.resolveIds = other.resolveIds;
    if (other.isSetFacets()) {
      List<Facet> __this__facets = new ArrayList<Facet>();
      for (Facet other_element : other.facets) {
        __this__facets.add(new Facet(other_element));
      }
      this.facets = __this__facets;
    }
    if (other.isSetSelector()) {
      this.selector = new Selector(other.selector);
    }
    this.startTime = other.startTime;
    this.cacheOnly = other.cacheOnly;
    this.allowStaleData = other.allowStaleData;
  }

  public BlurQuery deepCopy() {
    return new BlurQuery(this);
  }

  @Override
  public void clear() {
    this.queryStr = null;
    this.superQueryOn = true;

    this.type = com.nearinfinity.blur.thrift.generated.ScoreType.SUPER;

    this.postSuperFilter = null;
    this.preSuperFilter = null;
    this.start = 0L;

    this.fetch = 10;

    this.minimumNumberOfResults = 9223372036854775807L;

    this.maxQueryTime = 9223372036854775807L;

    setUuidIsSet(false);
    this.uuid = 0;
    this.userId = null;
    setResolveIdsIsSet(false);
    this.resolveIds = false;
    this.facets = null;
    this.selector = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    this.cacheOnly = false;

    setAllowStaleDataIsSet(false);
    this.allowStaleData = false;
  }

  public String getQueryStr() {
    return this.queryStr;
  }

  public BlurQuery setQueryStr(String queryStr) {
    this.queryStr = queryStr;
    return this;
  }

  public void unsetQueryStr() {
    this.queryStr = null;
  }

  /** Returns true if field queryStr is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStr() {
    return this.queryStr != null;
  }

  public void setQueryStrIsSet(boolean value) {
    if (!value) {
      this.queryStr = null;
    }
  }

  public boolean isSuperQueryOn() {
    return this.superQueryOn;
  }

  public BlurQuery setSuperQueryOn(boolean superQueryOn) {
    this.superQueryOn = superQueryOn;
    setSuperQueryOnIsSet(true);
    return this;
  }

  public void unsetSuperQueryOn() {
    __isset_bit_vector.clear(__SUPERQUERYON_ISSET_ID);
  }

  /** Returns true if field superQueryOn is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperQueryOn() {
    return __isset_bit_vector.get(__SUPERQUERYON_ISSET_ID);
  }

  public void setSuperQueryOnIsSet(boolean value) {
    __isset_bit_vector.set(__SUPERQUERYON_ISSET_ID, value);
  }

  /**
   * 
   * @see ScoreType
   */
  public ScoreType getType() {
    return this.type;
  }

  /**
   * 
   * @see ScoreType
   */
  public BlurQuery setType(ScoreType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getPostSuperFilter() {
    return this.postSuperFilter;
  }

  public BlurQuery setPostSuperFilter(String postSuperFilter) {
    this.postSuperFilter = postSuperFilter;
    return this;
  }

  public void unsetPostSuperFilter() {
    this.postSuperFilter = null;
  }

  /** Returns true if field postSuperFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetPostSuperFilter() {
    return this.postSuperFilter != null;
  }

  public void setPostSuperFilterIsSet(boolean value) {
    if (!value) {
      this.postSuperFilter = null;
    }
  }

  public String getPreSuperFilter() {
    return this.preSuperFilter;
  }

  public BlurQuery setPreSuperFilter(String preSuperFilter) {
    this.preSuperFilter = preSuperFilter;
    return this;
  }

  public void unsetPreSuperFilter() {
    this.preSuperFilter = null;
  }

  /** Returns true if field preSuperFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetPreSuperFilter() {
    return this.preSuperFilter != null;
  }

  public void setPreSuperFilterIsSet(boolean value) {
    if (!value) {
      this.preSuperFilter = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public BlurQuery setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bit_vector.clear(__START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return __isset_bit_vector.get(__START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bit_vector.set(__START_ISSET_ID, value);
  }

  public int getFetch() {
    return this.fetch;
  }

  public BlurQuery setFetch(int fetch) {
    this.fetch = fetch;
    setFetchIsSet(true);
    return this;
  }

  public void unsetFetch() {
    __isset_bit_vector.clear(__FETCH_ISSET_ID);
  }

  /** Returns true if field fetch is set (has been assigned a value) and false otherwise */
  public boolean isSetFetch() {
    return __isset_bit_vector.get(__FETCH_ISSET_ID);
  }

  public void setFetchIsSet(boolean value) {
    __isset_bit_vector.set(__FETCH_ISSET_ID, value);
  }

  public long getMinimumNumberOfResults() {
    return this.minimumNumberOfResults;
  }

  public BlurQuery setMinimumNumberOfResults(long minimumNumberOfResults) {
    this.minimumNumberOfResults = minimumNumberOfResults;
    setMinimumNumberOfResultsIsSet(true);
    return this;
  }

  public void unsetMinimumNumberOfResults() {
    __isset_bit_vector.clear(__MINIMUMNUMBEROFRESULTS_ISSET_ID);
  }

  /** Returns true if field minimumNumberOfResults is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimumNumberOfResults() {
    return __isset_bit_vector.get(__MINIMUMNUMBEROFRESULTS_ISSET_ID);
  }

  public void setMinimumNumberOfResultsIsSet(boolean value) {
    __isset_bit_vector.set(__MINIMUMNUMBEROFRESULTS_ISSET_ID, value);
  }

  public long getMaxQueryTime() {
    return this.maxQueryTime;
  }

  public BlurQuery setMaxQueryTime(long maxQueryTime) {
    this.maxQueryTime = maxQueryTime;
    setMaxQueryTimeIsSet(true);
    return this;
  }

  public void unsetMaxQueryTime() {
    __isset_bit_vector.clear(__MAXQUERYTIME_ISSET_ID);
  }

  /** Returns true if field maxQueryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxQueryTime() {
    return __isset_bit_vector.get(__MAXQUERYTIME_ISSET_ID);
  }

  public void setMaxQueryTimeIsSet(boolean value) {
    __isset_bit_vector.set(__MAXQUERYTIME_ISSET_ID, value);
  }

  public long getUuid() {
    return this.uuid;
  }

  public BlurQuery setUuid(long uuid) {
    this.uuid = uuid;
    setUuidIsSet(true);
    return this;
  }

  public void unsetUuid() {
    __isset_bit_vector.clear(__UUID_ISSET_ID);
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return __isset_bit_vector.get(__UUID_ISSET_ID);
  }

  public void setUuidIsSet(boolean value) {
    __isset_bit_vector.set(__UUID_ISSET_ID, value);
  }

  public String getUserId() {
    return this.userId;
  }

  public BlurQuery setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public boolean isResolveIds() {
    return this.resolveIds;
  }

  public BlurQuery setResolveIds(boolean resolveIds) {
    this.resolveIds = resolveIds;
    setResolveIdsIsSet(true);
    return this;
  }

  public void unsetResolveIds() {
    __isset_bit_vector.clear(__RESOLVEIDS_ISSET_ID);
  }

  /** Returns true if field resolveIds is set (has been assigned a value) and false otherwise */
  public boolean isSetResolveIds() {
    return __isset_bit_vector.get(__RESOLVEIDS_ISSET_ID);
  }

  public void setResolveIdsIsSet(boolean value) {
    __isset_bit_vector.set(__RESOLVEIDS_ISSET_ID, value);
  }

  public int getFacetsSize() {
    return (this.facets == null) ? 0 : this.facets.size();
  }

  public java.util.Iterator<Facet> getFacetsIterator() {
    return (this.facets == null) ? null : this.facets.iterator();
  }

  public void addToFacets(Facet elem) {
    if (this.facets == null) {
      this.facets = new ArrayList<Facet>();
    }
    this.facets.add(elem);
  }

  public List<Facet> getFacets() {
    return this.facets;
  }

  public BlurQuery setFacets(List<Facet> facets) {
    this.facets = facets;
    return this;
  }

  public void unsetFacets() {
    this.facets = null;
  }

  /** Returns true if field facets is set (has been assigned a value) and false otherwise */
  public boolean isSetFacets() {
    return this.facets != null;
  }

  public void setFacetsIsSet(boolean value) {
    if (!value) {
      this.facets = null;
    }
  }

  public Selector getSelector() {
    return this.selector;
  }

  public BlurQuery setSelector(Selector selector) {
    this.selector = selector;
    return this;
  }

  public void unsetSelector() {
    this.selector = null;
  }

  /** Returns true if field selector is set (has been assigned a value) and false otherwise */
  public boolean isSetSelector() {
    return this.selector != null;
  }

  public void setSelectorIsSet(boolean value) {
    if (!value) {
      this.selector = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public BlurQuery setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
  }

  public boolean isCacheOnly() {
    return this.cacheOnly;
  }

  public BlurQuery setCacheOnly(boolean cacheOnly) {
    this.cacheOnly = cacheOnly;
    setCacheOnlyIsSet(true);
    return this;
  }

  public void unsetCacheOnly() {
    __isset_bit_vector.clear(__CACHEONLY_ISSET_ID);
  }

  /** Returns true if field cacheOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheOnly() {
    return __isset_bit_vector.get(__CACHEONLY_ISSET_ID);
  }

  public void setCacheOnlyIsSet(boolean value) {
    __isset_bit_vector.set(__CACHEONLY_ISSET_ID, value);
  }

  public boolean isAllowStaleData() {
    return this.allowStaleData;
  }

  public BlurQuery setAllowStaleData(boolean allowStaleData) {
    this.allowStaleData = allowStaleData;
    setAllowStaleDataIsSet(true);
    return this;
  }

  public void unsetAllowStaleData() {
    __isset_bit_vector.clear(__ALLOWSTALEDATA_ISSET_ID);
  }

  /** Returns true if field allowStaleData is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowStaleData() {
    return __isset_bit_vector.get(__ALLOWSTALEDATA_ISSET_ID);
  }

  public void setAllowStaleDataIsSet(boolean value) {
    __isset_bit_vector.set(__ALLOWSTALEDATA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_STR:
      if (value == null) {
        unsetQueryStr();
      } else {
        setQueryStr((String)value);
      }
      break;

    case SUPER_QUERY_ON:
      if (value == null) {
        unsetSuperQueryOn();
      } else {
        setSuperQueryOn((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ScoreType)value);
      }
      break;

    case POST_SUPER_FILTER:
      if (value == null) {
        unsetPostSuperFilter();
      } else {
        setPostSuperFilter((String)value);
      }
      break;

    case PRE_SUPER_FILTER:
      if (value == null) {
        unsetPreSuperFilter();
      } else {
        setPreSuperFilter((String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case FETCH:
      if (value == null) {
        unsetFetch();
      } else {
        setFetch((Integer)value);
      }
      break;

    case MINIMUM_NUMBER_OF_RESULTS:
      if (value == null) {
        unsetMinimumNumberOfResults();
      } else {
        setMinimumNumberOfResults((Long)value);
      }
      break;

    case MAX_QUERY_TIME:
      if (value == null) {
        unsetMaxQueryTime();
      } else {
        setMaxQueryTime((Long)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case RESOLVE_IDS:
      if (value == null) {
        unsetResolveIds();
      } else {
        setResolveIds((Boolean)value);
      }
      break;

    case FACETS:
      if (value == null) {
        unsetFacets();
      } else {
        setFacets((List<Facet>)value);
      }
      break;

    case SELECTOR:
      if (value == null) {
        unsetSelector();
      } else {
        setSelector((Selector)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case CACHE_ONLY:
      if (value == null) {
        unsetCacheOnly();
      } else {
        setCacheOnly((Boolean)value);
      }
      break;

    case ALLOW_STALE_DATA:
      if (value == null) {
        unsetAllowStaleData();
      } else {
        setAllowStaleData((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_STR:
      return getQueryStr();

    case SUPER_QUERY_ON:
      return Boolean.valueOf(isSuperQueryOn());

    case TYPE:
      return getType();

    case POST_SUPER_FILTER:
      return getPostSuperFilter();

    case PRE_SUPER_FILTER:
      return getPreSuperFilter();

    case START:
      return Long.valueOf(getStart());

    case FETCH:
      return Integer.valueOf(getFetch());

    case MINIMUM_NUMBER_OF_RESULTS:
      return Long.valueOf(getMinimumNumberOfResults());

    case MAX_QUERY_TIME:
      return Long.valueOf(getMaxQueryTime());

    case UUID:
      return Long.valueOf(getUuid());

    case USER_ID:
      return getUserId();

    case RESOLVE_IDS:
      return Boolean.valueOf(isResolveIds());

    case FACETS:
      return getFacets();

    case SELECTOR:
      return getSelector();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case CACHE_ONLY:
      return Boolean.valueOf(isCacheOnly());

    case ALLOW_STALE_DATA:
      return Boolean.valueOf(isAllowStaleData());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_STR:
      return isSetQueryStr();
    case SUPER_QUERY_ON:
      return isSetSuperQueryOn();
    case TYPE:
      return isSetType();
    case POST_SUPER_FILTER:
      return isSetPostSuperFilter();
    case PRE_SUPER_FILTER:
      return isSetPreSuperFilter();
    case START:
      return isSetStart();
    case FETCH:
      return isSetFetch();
    case MINIMUM_NUMBER_OF_RESULTS:
      return isSetMinimumNumberOfResults();
    case MAX_QUERY_TIME:
      return isSetMaxQueryTime();
    case UUID:
      return isSetUuid();
    case USER_ID:
      return isSetUserId();
    case RESOLVE_IDS:
      return isSetResolveIds();
    case FACETS:
      return isSetFacets();
    case SELECTOR:
      return isSetSelector();
    case START_TIME:
      return isSetStartTime();
    case CACHE_ONLY:
      return isSetCacheOnly();
    case ALLOW_STALE_DATA:
      return isSetAllowStaleData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlurQuery)
      return this.equals((BlurQuery)that);
    return false;
  }

  public boolean equals(BlurQuery that) {
    if (that == null)
      return false;

    boolean this_present_queryStr = true && this.isSetQueryStr();
    boolean that_present_queryStr = true && that.isSetQueryStr();
    if (this_present_queryStr || that_present_queryStr) {
      if (!(this_present_queryStr && that_present_queryStr))
        return false;
      if (!this.queryStr.equals(that.queryStr))
        return false;
    }

    boolean this_present_superQueryOn = true;
    boolean that_present_superQueryOn = true;
    if (this_present_superQueryOn || that_present_superQueryOn) {
      if (!(this_present_superQueryOn && that_present_superQueryOn))
        return false;
      if (this.superQueryOn != that.superQueryOn)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_postSuperFilter = true && this.isSetPostSuperFilter();
    boolean that_present_postSuperFilter = true && that.isSetPostSuperFilter();
    if (this_present_postSuperFilter || that_present_postSuperFilter) {
      if (!(this_present_postSuperFilter && that_present_postSuperFilter))
        return false;
      if (!this.postSuperFilter.equals(that.postSuperFilter))
        return false;
    }

    boolean this_present_preSuperFilter = true && this.isSetPreSuperFilter();
    boolean that_present_preSuperFilter = true && that.isSetPreSuperFilter();
    if (this_present_preSuperFilter || that_present_preSuperFilter) {
      if (!(this_present_preSuperFilter && that_present_preSuperFilter))
        return false;
      if (!this.preSuperFilter.equals(that.preSuperFilter))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_fetch = true;
    boolean that_present_fetch = true;
    if (this_present_fetch || that_present_fetch) {
      if (!(this_present_fetch && that_present_fetch))
        return false;
      if (this.fetch != that.fetch)
        return false;
    }

    boolean this_present_minimumNumberOfResults = true;
    boolean that_present_minimumNumberOfResults = true;
    if (this_present_minimumNumberOfResults || that_present_minimumNumberOfResults) {
      if (!(this_present_minimumNumberOfResults && that_present_minimumNumberOfResults))
        return false;
      if (this.minimumNumberOfResults != that.minimumNumberOfResults)
        return false;
    }

    boolean this_present_maxQueryTime = true;
    boolean that_present_maxQueryTime = true;
    if (this_present_maxQueryTime || that_present_maxQueryTime) {
      if (!(this_present_maxQueryTime && that_present_maxQueryTime))
        return false;
      if (this.maxQueryTime != that.maxQueryTime)
        return false;
    }

    boolean this_present_uuid = true;
    boolean that_present_uuid = true;
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (this.uuid != that.uuid)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_resolveIds = true;
    boolean that_present_resolveIds = true;
    if (this_present_resolveIds || that_present_resolveIds) {
      if (!(this_present_resolveIds && that_present_resolveIds))
        return false;
      if (this.resolveIds != that.resolveIds)
        return false;
    }

    boolean this_present_facets = true && this.isSetFacets();
    boolean that_present_facets = true && that.isSetFacets();
    if (this_present_facets || that_present_facets) {
      if (!(this_present_facets && that_present_facets))
        return false;
      if (!this.facets.equals(that.facets))
        return false;
    }

    boolean this_present_selector = true && this.isSetSelector();
    boolean that_present_selector = true && that.isSetSelector();
    if (this_present_selector || that_present_selector) {
      if (!(this_present_selector && that_present_selector))
        return false;
      if (!this.selector.equals(that.selector))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_cacheOnly = true;
    boolean that_present_cacheOnly = true;
    if (this_present_cacheOnly || that_present_cacheOnly) {
      if (!(this_present_cacheOnly && that_present_cacheOnly))
        return false;
      if (this.cacheOnly != that.cacheOnly)
        return false;
    }

    boolean this_present_allowStaleData = true;
    boolean that_present_allowStaleData = true;
    if (this_present_allowStaleData || that_present_allowStaleData) {
      if (!(this_present_allowStaleData && that_present_allowStaleData))
        return false;
      if (this.allowStaleData != that.allowStaleData)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlurQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlurQuery typedOther = (BlurQuery)other;

    lastComparison = Boolean.valueOf(isSetQueryStr()).compareTo(typedOther.isSetQueryStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStr, typedOther.queryStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperQueryOn()).compareTo(typedOther.isSetSuperQueryOn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperQueryOn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superQueryOn, typedOther.superQueryOn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostSuperFilter()).compareTo(typedOther.isSetPostSuperFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostSuperFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postSuperFilter, typedOther.postSuperFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreSuperFilter()).compareTo(typedOther.isSetPreSuperFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreSuperFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSuperFilter, typedOther.preSuperFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetch()).compareTo(typedOther.isSetFetch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetch, typedOther.fetch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinimumNumberOfResults()).compareTo(typedOther.isSetMinimumNumberOfResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimumNumberOfResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minimumNumberOfResults, typedOther.minimumNumberOfResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxQueryTime()).compareTo(typedOther.isSetMaxQueryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxQueryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxQueryTime, typedOther.maxQueryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolveIds()).compareTo(typedOther.isSetResolveIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolveIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolveIds, typedOther.resolveIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacets()).compareTo(typedOther.isSetFacets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facets, typedOther.facets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelector()).compareTo(typedOther.isSetSelector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selector, typedOther.selector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCacheOnly()).compareTo(typedOther.isSetCacheOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheOnly, typedOther.cacheOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowStaleData()).compareTo(typedOther.isSetAllowStaleData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowStaleData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowStaleData, typedOther.allowStaleData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY_STR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.queryStr = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPER_QUERY_ON
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.superQueryOn = iprot.readBool();
            setSuperQueryOnIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.type = ScoreType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // POST_SUPER_FILTER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.postSuperFilter = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PRE_SUPER_FILTER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.preSuperFilter = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // START
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.start = iprot.readI64();
            setStartIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // FETCH
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.fetch = iprot.readI32();
            setFetchIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // MINIMUM_NUMBER_OF_RESULTS
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.minimumNumberOfResults = iprot.readI64();
            setMinimumNumberOfResultsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MAX_QUERY_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.maxQueryTime = iprot.readI64();
            setMaxQueryTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // UUID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.uuid = iprot.readI64();
            setUuidIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // USER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.userId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // RESOLVE_IDS
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.resolveIds = iprot.readBool();
            setResolveIdsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // FACETS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
              this.facets = new ArrayList<Facet>(_list36.size);
              for (int _i37 = 0; _i37 < _list36.size; ++_i37)
              {
                Facet _elem38; // required
                _elem38 = new Facet();
                _elem38.read(iprot);
                this.facets.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SELECTOR
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.selector = new Selector();
            this.selector.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // START_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.startTime = iprot.readI64();
            setStartTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // CACHE_ONLY
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.cacheOnly = iprot.readBool();
            setCacheOnlyIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // ALLOW_STALE_DATA
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.allowStaleData = iprot.readBool();
            setAllowStaleDataIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.queryStr != null) {
      oprot.writeFieldBegin(QUERY_STR_FIELD_DESC);
      oprot.writeString(this.queryStr);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SUPER_QUERY_ON_FIELD_DESC);
    oprot.writeBool(this.superQueryOn);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.postSuperFilter != null) {
      oprot.writeFieldBegin(POST_SUPER_FILTER_FIELD_DESC);
      oprot.writeString(this.postSuperFilter);
      oprot.writeFieldEnd();
    }
    if (this.preSuperFilter != null) {
      oprot.writeFieldBegin(PRE_SUPER_FILTER_FIELD_DESC);
      oprot.writeString(this.preSuperFilter);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_FIELD_DESC);
    oprot.writeI64(this.start);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FETCH_FIELD_DESC);
    oprot.writeI32(this.fetch);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MINIMUM_NUMBER_OF_RESULTS_FIELD_DESC);
    oprot.writeI64(this.minimumNumberOfResults);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_QUERY_TIME_FIELD_DESC);
    oprot.writeI64(this.maxQueryTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UUID_FIELD_DESC);
    oprot.writeI64(this.uuid);
    oprot.writeFieldEnd();
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RESOLVE_IDS_FIELD_DESC);
    oprot.writeBool(this.resolveIds);
    oprot.writeFieldEnd();
    if (this.facets != null) {
      oprot.writeFieldBegin(FACETS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.facets.size()));
        for (Facet _iter39 : this.facets)
        {
          _iter39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.selector != null) {
      oprot.writeFieldBegin(SELECTOR_FIELD_DESC);
      this.selector.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI64(this.startTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CACHE_ONLY_FIELD_DESC);
    oprot.writeBool(this.cacheOnly);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ALLOW_STALE_DATA_FIELD_DESC);
    oprot.writeBool(this.allowStaleData);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlurQuery(");
    boolean first = true;

    sb.append("queryStr:");
    if (this.queryStr == null) {
      sb.append("null");
    } else {
      sb.append(this.queryStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superQueryOn:");
    sb.append(this.superQueryOn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postSuperFilter:");
    if (this.postSuperFilter == null) {
      sb.append("null");
    } else {
      sb.append(this.postSuperFilter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preSuperFilter:");
    if (this.preSuperFilter == null) {
      sb.append("null");
    } else {
      sb.append(this.preSuperFilter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetch:");
    sb.append(this.fetch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minimumNumberOfResults:");
    sb.append(this.minimumNumberOfResults);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxQueryTime:");
    sb.append(this.maxQueryTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    sb.append(this.uuid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resolveIds:");
    sb.append(this.resolveIds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facets:");
    if (this.facets == null) {
      sb.append("null");
    } else {
      sb.append(this.facets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("selector:");
    if (this.selector == null) {
      sb.append("null");
    } else {
      sb.append(this.selector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheOnly:");
    sb.append(this.cacheOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowStaleData:");
    sb.append(this.allowStaleData);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

