/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Hits implements TBase<Hits, Hits._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Hits");

  private static final TField TOTAL_HITS_FIELD_DESC = new TField("totalHits", TType.I64, (short)1);
  private static final TField SHARD_INFO_FIELD_DESC = new TField("shardInfo", TType.MAP, (short)2);
  private static final TField HITS_FIELD_DESC = new TField("hits", TType.LIST, (short)3);
  private static final TField EXCEPTIONS_FIELD_DESC = new TField("exceptions", TType.LIST, (short)4);

  public long totalHits;
  public Map<String,Long> shardInfo;
  public List<Hit> hits;
  public List<BlurException> exceptions;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TOTAL_HITS((short)1, "totalHits"),
    SHARD_INFO((short)2, "shardInfo"),
    HITS((short)3, "hits"),
    EXCEPTIONS((short)4, "exceptions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_HITS
          return TOTAL_HITS;
        case 2: // SHARD_INFO
          return SHARD_INFO;
        case 3: // HITS
          return HITS;
        case 4: // EXCEPTIONS
          return EXCEPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALHITS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_HITS, new FieldMetaData("totalHits", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SHARD_INFO, new FieldMetaData("shardInfo", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.HITS, new FieldMetaData("hits", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Hit.class))));
    tmpMap.put(_Fields.EXCEPTIONS, new FieldMetaData("exceptions", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRUCT))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Hits.class, metaDataMap);
  }

  public Hits() {
    this.totalHits = 0L;

  }

  public Hits(
    long totalHits,
    Map<String,Long> shardInfo,
    List<Hit> hits,
    List<BlurException> exceptions)
  {
    this();
    this.totalHits = totalHits;
    setTotalHitsIsSet(true);
    this.shardInfo = shardInfo;
    this.hits = hits;
    this.exceptions = exceptions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Hits(Hits other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.totalHits = other.totalHits;
    if (other.isSetShardInfo()) {
      Map<String,Long> __this__shardInfo = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.shardInfo.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__shardInfo_copy_key = other_element_key;

        Long __this__shardInfo_copy_value = other_element_value;

        __this__shardInfo.put(__this__shardInfo_copy_key, __this__shardInfo_copy_value);
      }
      this.shardInfo = __this__shardInfo;
    }
    if (other.isSetHits()) {
      List<Hit> __this__hits = new ArrayList<Hit>();
      for (Hit other_element : other.hits) {
        __this__hits.add(new Hit(other_element));
      }
      this.hits = __this__hits;
    }
    if (other.isSetExceptions()) {
      List<BlurException> __this__exceptions = new ArrayList<BlurException>();
      for (BlurException other_element : other.exceptions) {
        __this__exceptions.add(new BlurException(other_element));
      }
      this.exceptions = __this__exceptions;
    }
  }

  public Hits deepCopy() {
    return new Hits(this);
  }

  @Deprecated
  public Hits clone() {
    return new Hits(this);
  }

  public long getTotalHits() {
    return this.totalHits;
  }

  public Hits setTotalHits(long totalHits) {
    this.totalHits = totalHits;
    setTotalHitsIsSet(true);
    return this;
  }

  public void unsetTotalHits() {
    __isset_bit_vector.clear(__TOTALHITS_ISSET_ID);
  }

  /** Returns true if field totalHits is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalHits() {
    return __isset_bit_vector.get(__TOTALHITS_ISSET_ID);
  }

  public void setTotalHitsIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALHITS_ISSET_ID, value);
  }

  public int getShardInfoSize() {
    return (this.shardInfo == null) ? 0 : this.shardInfo.size();
  }

  public void putToShardInfo(String key, long val) {
    if (this.shardInfo == null) {
      this.shardInfo = new HashMap<String,Long>();
    }
    this.shardInfo.put(key, val);
  }

  public Map<String,Long> getShardInfo() {
    return this.shardInfo;
  }

  public Hits setShardInfo(Map<String,Long> shardInfo) {
    this.shardInfo = shardInfo;
    return this;
  }

  public void unsetShardInfo() {
    this.shardInfo = null;
  }

  /** Returns true if field shardInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetShardInfo() {
    return this.shardInfo != null;
  }

  public void setShardInfoIsSet(boolean value) {
    if (!value) {
      this.shardInfo = null;
    }
  }

  public int getHitsSize() {
    return (this.hits == null) ? 0 : this.hits.size();
  }

  public java.util.Iterator<Hit> getHitsIterator() {
    return (this.hits == null) ? null : this.hits.iterator();
  }

  public void addToHits(Hit elem) {
    if (this.hits == null) {
      this.hits = new ArrayList<Hit>();
    }
    this.hits.add(elem);
  }

  public List<Hit> getHits() {
    return this.hits;
  }

  public Hits setHits(List<Hit> hits) {
    this.hits = hits;
    return this;
  }

  public void unsetHits() {
    this.hits = null;
  }

  /** Returns true if field hits is set (has been asigned a value) and false otherwise */
  public boolean isSetHits() {
    return this.hits != null;
  }

  public void setHitsIsSet(boolean value) {
    if (!value) {
      this.hits = null;
    }
  }

  public int getExceptionsSize() {
    return (this.exceptions == null) ? 0 : this.exceptions.size();
  }

  public java.util.Iterator<BlurException> getExceptionsIterator() {
    return (this.exceptions == null) ? null : this.exceptions.iterator();
  }

  public void addToExceptions(BlurException elem) {
    if (this.exceptions == null) {
      this.exceptions = new ArrayList<BlurException>();
    }
    this.exceptions.add(elem);
  }

  public List<BlurException> getExceptions() {
    return this.exceptions;
  }

  public Hits setExceptions(List<BlurException> exceptions) {
    this.exceptions = exceptions;
    return this;
  }

  public void unsetExceptions() {
    this.exceptions = null;
  }

  /** Returns true if field exceptions is set (has been asigned a value) and false otherwise */
  public boolean isSetExceptions() {
    return this.exceptions != null;
  }

  public void setExceptionsIsSet(boolean value) {
    if (!value) {
      this.exceptions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_HITS:
      if (value == null) {
        unsetTotalHits();
      } else {
        setTotalHits((Long)value);
      }
      break;

    case SHARD_INFO:
      if (value == null) {
        unsetShardInfo();
      } else {
        setShardInfo((Map<String,Long>)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((List<Hit>)value);
      }
      break;

    case EXCEPTIONS:
      if (value == null) {
        unsetExceptions();
      } else {
        setExceptions((List<BlurException>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_HITS:
      return new Long(getTotalHits());

    case SHARD_INFO:
      return getShardInfo();

    case HITS:
      return getHits();

    case EXCEPTIONS:
      return getExceptions();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case TOTAL_HITS:
      return isSetTotalHits();
    case SHARD_INFO:
      return isSetShardInfo();
    case HITS:
      return isSetHits();
    case EXCEPTIONS:
      return isSetExceptions();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Hits)
      return this.equals((Hits)that);
    return false;
  }

  public boolean equals(Hits that) {
    if (that == null)
      return false;

    boolean this_present_totalHits = true;
    boolean that_present_totalHits = true;
    if (this_present_totalHits || that_present_totalHits) {
      if (!(this_present_totalHits && that_present_totalHits))
        return false;
      if (this.totalHits != that.totalHits)
        return false;
    }

    boolean this_present_shardInfo = true && this.isSetShardInfo();
    boolean that_present_shardInfo = true && that.isSetShardInfo();
    if (this_present_shardInfo || that_present_shardInfo) {
      if (!(this_present_shardInfo && that_present_shardInfo))
        return false;
      if (!this.shardInfo.equals(that.shardInfo))
        return false;
    }

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (!this.hits.equals(that.hits))
        return false;
    }

    boolean this_present_exceptions = true && this.isSetExceptions();
    boolean that_present_exceptions = true && that.isSetExceptions();
    if (this_present_exceptions || that_present_exceptions) {
      if (!(this_present_exceptions && that_present_exceptions))
        return false;
      if (!this.exceptions.equals(that.exceptions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Hits other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Hits typedOther = (Hits)other;

    lastComparison = Boolean.valueOf(isSetTotalHits()).compareTo(typedOther.isSetTotalHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHits()) {      lastComparison = TBaseHelper.compareTo(this.totalHits, typedOther.totalHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShardInfo()).compareTo(typedOther.isSetShardInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardInfo()) {      lastComparison = TBaseHelper.compareTo(this.shardInfo, typedOther.shardInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHits()).compareTo(typedOther.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {      lastComparison = TBaseHelper.compareTo(this.hits, typedOther.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptions()).compareTo(typedOther.isSetExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptions()) {      lastComparison = TBaseHelper.compareTo(this.exceptions, typedOther.exceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TOTAL_HITS
          if (field.type == TType.I64) {
            this.totalHits = iprot.readI64();
            setTotalHitsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SHARD_INFO
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.shardInfo = new HashMap<String,Long>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                long _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readI64();
                this.shardInfo.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HITS
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.hits = new ArrayList<Hit>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                Hit _elem6;
                _elem6 = new Hit();
                _elem6.read(iprot);
                this.hits.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EXCEPTIONS
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.exceptions = new ArrayList<BlurException>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                BlurException _elem9;
                _elem9 = new BlurException();
                _elem9.read(iprot);
                this.exceptions.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TOTAL_HITS_FIELD_DESC);
    oprot.writeI64(this.totalHits);
    oprot.writeFieldEnd();
    if (this.shardInfo != null) {
      oprot.writeFieldBegin(SHARD_INFO_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.shardInfo.size()));
        for (Map.Entry<String, Long> _iter10 : this.shardInfo.entrySet())
        {
          oprot.writeString(_iter10.getKey());
          oprot.writeI64(_iter10.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.hits != null) {
      oprot.writeFieldBegin(HITS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.hits.size()));
        for (Hit _iter11 : this.hits)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.exceptions != null) {
      oprot.writeFieldBegin(EXCEPTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.exceptions.size()));
        for (BlurException _iter12 : this.exceptions)
        {
          _iter12.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Hits(");
    boolean first = true;

    sb.append("totalHits:");
    sb.append(this.totalHits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shardInfo:");
    if (this.shardInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.shardInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hits:");
    if (this.hits == null) {
      sb.append("null");
    } else {
      sb.append(this.hits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptions:");
    if (this.exceptions == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

