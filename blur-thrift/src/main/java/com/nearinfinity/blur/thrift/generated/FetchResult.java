/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FetchResult implements TBase<FetchResult, FetchResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FetchResult");

  private static final TField EXISTS_FIELD_DESC = new TField("exists", TType.BOOL, (short)1);
  private static final TField DELETED_FIELD_DESC = new TField("deleted", TType.BOOL, (short)2);
  private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)3);
  private static final TField ROW_FIELD_DESC = new TField("row", TType.STRUCT, (short)4);
  private static final TField RECORD_FIELD_DESC = new TField("record", TType.SET, (short)5);

  public boolean exists;
  public boolean deleted;
  public String table;
  public Row row;
  public Set<Column> record;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    EXISTS((short)1, "exists"),
    DELETED((short)2, "deleted"),
    TABLE((short)3, "table"),
    ROW((short)4, "row"),
    RECORD((short)5, "record");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXISTS
          return EXISTS;
        case 2: // DELETED
          return DELETED;
        case 3: // TABLE
          return TABLE;
        case 4: // ROW
          return ROW;
        case 5: // RECORD
          return RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXISTS_ISSET_ID = 0;
  private static final int __DELETED_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXISTS, new FieldMetaData("exists", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.DELETED, new FieldMetaData("deleted", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ROW, new FieldMetaData("row", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Row.class)));
    tmpMap.put(_Fields.RECORD, new FieldMetaData("record", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, Column.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FetchResult.class, metaDataMap);
  }

  public FetchResult() {
  }

  public FetchResult(
    boolean exists,
    boolean deleted,
    String table,
    Row row,
    Set<Column> record)
  {
    this();
    this.exists = exists;
    setExistsIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.table = table;
    this.row = row;
    this.record = record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchResult(FetchResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.exists = other.exists;
    this.deleted = other.deleted;
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetRow()) {
      this.row = new Row(other.row);
    }
    if (other.isSetRecord()) {
      Set<Column> __this__record = new HashSet<Column>();
      for (Column other_element : other.record) {
        __this__record.add(new Column(other_element));
      }
      this.record = __this__record;
    }
  }

  public FetchResult deepCopy() {
    return new FetchResult(this);
  }

  @Override
  public void clear() {
    setExistsIsSet(false);
    this.exists = false;
    setDeletedIsSet(false);
    this.deleted = false;
    this.table = null;
    this.row = null;
    this.record = null;
  }

  public boolean isExists() {
    return this.exists;
  }

  public FetchResult setExists(boolean exists) {
    this.exists = exists;
    setExistsIsSet(true);
    return this;
  }

  public void unsetExists() {
    __isset_bit_vector.clear(__EXISTS_ISSET_ID);
  }

  /** Returns true if field exists is set (has been asigned a value) and false otherwise */
  public boolean isSetExists() {
    return __isset_bit_vector.get(__EXISTS_ISSET_ID);
  }

  public void setExistsIsSet(boolean value) {
    __isset_bit_vector.set(__EXISTS_ISSET_ID, value);
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public FetchResult setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bit_vector.clear(__DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been asigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return __isset_bit_vector.get(__DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_ISSET_ID, value);
  }

  public String getTable() {
    return this.table;
  }

  public FetchResult setTable(String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been asigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public Row getRow() {
    return this.row;
  }

  public FetchResult setRow(Row row) {
    this.row = row;
    return this;
  }

  public void unsetRow() {
    this.row = null;
  }

  /** Returns true if field row is set (has been asigned a value) and false otherwise */
  public boolean isSetRow() {
    return this.row != null;
  }

  public void setRowIsSet(boolean value) {
    if (!value) {
      this.row = null;
    }
  }

  public int getRecordSize() {
    return (this.record == null) ? 0 : this.record.size();
  }

  public java.util.Iterator<Column> getRecordIterator() {
    return (this.record == null) ? null : this.record.iterator();
  }

  public void addToRecord(Column elem) {
    if (this.record == null) {
      this.record = new HashSet<Column>();
    }
    this.record.add(elem);
  }

  public Set<Column> getRecord() {
    return this.record;
  }

  public FetchResult setRecord(Set<Column> record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been asigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXISTS:
      if (value == null) {
        unsetExists();
      } else {
        setExists((Boolean)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((String)value);
      }
      break;

    case ROW:
      if (value == null) {
        unsetRow();
      } else {
        setRow((Row)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((Set<Column>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXISTS:
      return new Boolean(isExists());

    case DELETED:
      return new Boolean(isDeleted());

    case TABLE:
      return getTable();

    case ROW:
      return getRow();

    case RECORD:
      return getRecord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXISTS:
      return isSetExists();
    case DELETED:
      return isSetDeleted();
    case TABLE:
      return isSetTable();
    case ROW:
      return isSetRow();
    case RECORD:
      return isSetRecord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchResult)
      return this.equals((FetchResult)that);
    return false;
  }

  public boolean equals(FetchResult that) {
    if (that == null)
      return false;

    boolean this_present_exists = true;
    boolean that_present_exists = true;
    if (this_present_exists || that_present_exists) {
      if (!(this_present_exists && that_present_exists))
        return false;
      if (this.exists != that.exists)
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_row = true && this.isSetRow();
    boolean that_present_row = true && that.isSetRow();
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (!this.row.equals(that.row))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FetchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FetchResult typedOther = (FetchResult)other;

    lastComparison = Boolean.valueOf(isSetExists()).compareTo(typedOther.isSetExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExists()) {
      lastComparison = TBaseHelper.compareTo(this.exists, typedOther.exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = TBaseHelper.compareTo(this.table, typedOther.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow()) {
      lastComparison = TBaseHelper.compareTo(this.row, typedOther.row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(typedOther.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = TBaseHelper.compareTo(this.record, typedOther.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EXISTS
          if (field.type == TType.BOOL) {
            this.exists = iprot.readBool();
            setExistsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DELETED
          if (field.type == TType.BOOL) {
            this.deleted = iprot.readBool();
            setDeletedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TABLE
          if (field.type == TType.STRING) {
            this.table = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ROW
          if (field.type == TType.STRUCT) {
            this.row = new Row();
            this.row.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RECORD
          if (field.type == TType.SET) {
            {
              TSet _set42 = iprot.readSetBegin();
              this.record = new HashSet<Column>(2*_set42.size);
              for (int _i43 = 0; _i43 < _set42.size; ++_i43)
              {
                Column _elem44;
                _elem44 = new Column();
                _elem44.read(iprot);
                this.record.add(_elem44);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EXISTS_FIELD_DESC);
    oprot.writeBool(this.exists);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DELETED_FIELD_DESC);
    oprot.writeBool(this.deleted);
    oprot.writeFieldEnd();
    if (this.table != null) {
      oprot.writeFieldBegin(TABLE_FIELD_DESC);
      oprot.writeString(this.table);
      oprot.writeFieldEnd();
    }
    if (this.row != null) {
      oprot.writeFieldBegin(ROW_FIELD_DESC);
      this.row.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.record != null) {
      oprot.writeFieldBegin(RECORD_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.record.size()));
        for (Column _iter45 : this.record)
        {
          _iter45.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchResult(");
    boolean first = true;

    sb.append("exists:");
    sb.append(this.exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row:");
    if (this.row == null) {
      sb.append("null");
    } else {
      sb.append(this.row);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

