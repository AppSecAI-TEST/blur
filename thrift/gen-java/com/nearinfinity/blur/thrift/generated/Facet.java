/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Facet implements TBase<Facet, Facet._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Facet");

  private static final TField QUERY_STR_FIELD_DESC = new TField("queryStr", TType.STRING, (short)1);
  private static final TField MINIMUM_NUMBER_OF_HITS_FIELD_DESC = new TField("minimumNumberOfHits", TType.I64, (short)2);

  public String queryStr;
  public long minimumNumberOfHits;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY_STR((short)1, "queryStr"),
    MINIMUM_NUMBER_OF_HITS((short)2, "minimumNumberOfHits");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_STR
          return QUERY_STR;
        case 2: // MINIMUM_NUMBER_OF_HITS
          return MINIMUM_NUMBER_OF_HITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINIMUMNUMBEROFHITS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_STR, new FieldMetaData("queryStr", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MINIMUM_NUMBER_OF_HITS, new FieldMetaData("minimumNumberOfHits", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Facet.class, metaDataMap);
  }

  public Facet() {
  }

  public Facet(
    String queryStr,
    long minimumNumberOfHits)
  {
    this();
    this.queryStr = queryStr;
    this.minimumNumberOfHits = minimumNumberOfHits;
    setMinimumNumberOfHitsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Facet(Facet other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQueryStr()) {
      this.queryStr = other.queryStr;
    }
    this.minimumNumberOfHits = other.minimumNumberOfHits;
  }

  public Facet deepCopy() {
    return new Facet(this);
  }

  @Deprecated
  public Facet clone() {
    return new Facet(this);
  }

  public String getQueryStr() {
    return this.queryStr;
  }

  public Facet setQueryStr(String queryStr) {
    this.queryStr = queryStr;
    return this;
  }

  public void unsetQueryStr() {
    this.queryStr = null;
  }

  /** Returns true if field queryStr is set (has been asigned a value) and false otherwise */
  public boolean isSetQueryStr() {
    return this.queryStr != null;
  }

  public void setQueryStrIsSet(boolean value) {
    if (!value) {
      this.queryStr = null;
    }
  }

  public long getMinimumNumberOfHits() {
    return this.minimumNumberOfHits;
  }

  public Facet setMinimumNumberOfHits(long minimumNumberOfHits) {
    this.minimumNumberOfHits = minimumNumberOfHits;
    setMinimumNumberOfHitsIsSet(true);
    return this;
  }

  public void unsetMinimumNumberOfHits() {
    __isset_bit_vector.clear(__MINIMUMNUMBEROFHITS_ISSET_ID);
  }

  /** Returns true if field minimumNumberOfHits is set (has been asigned a value) and false otherwise */
  public boolean isSetMinimumNumberOfHits() {
    return __isset_bit_vector.get(__MINIMUMNUMBEROFHITS_ISSET_ID);
  }

  public void setMinimumNumberOfHitsIsSet(boolean value) {
    __isset_bit_vector.set(__MINIMUMNUMBEROFHITS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_STR:
      if (value == null) {
        unsetQueryStr();
      } else {
        setQueryStr((String)value);
      }
      break;

    case MINIMUM_NUMBER_OF_HITS:
      if (value == null) {
        unsetMinimumNumberOfHits();
      } else {
        setMinimumNumberOfHits((Long)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_STR:
      return getQueryStr();

    case MINIMUM_NUMBER_OF_HITS:
      return new Long(getMinimumNumberOfHits());

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case QUERY_STR:
      return isSetQueryStr();
    case MINIMUM_NUMBER_OF_HITS:
      return isSetMinimumNumberOfHits();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Facet)
      return this.equals((Facet)that);
    return false;
  }

  public boolean equals(Facet that) {
    if (that == null)
      return false;

    boolean this_present_queryStr = true && this.isSetQueryStr();
    boolean that_present_queryStr = true && that.isSetQueryStr();
    if (this_present_queryStr || that_present_queryStr) {
      if (!(this_present_queryStr && that_present_queryStr))
        return false;
      if (!this.queryStr.equals(that.queryStr))
        return false;
    }

    boolean this_present_minimumNumberOfHits = true;
    boolean that_present_minimumNumberOfHits = true;
    if (this_present_minimumNumberOfHits || that_present_minimumNumberOfHits) {
      if (!(this_present_minimumNumberOfHits && that_present_minimumNumberOfHits))
        return false;
      if (this.minimumNumberOfHits != that.minimumNumberOfHits)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Facet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Facet typedOther = (Facet)other;

    lastComparison = Boolean.valueOf(isSetQueryStr()).compareTo(typedOther.isSetQueryStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStr()) {      lastComparison = TBaseHelper.compareTo(this.queryStr, typedOther.queryStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinimumNumberOfHits()).compareTo(typedOther.isSetMinimumNumberOfHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimumNumberOfHits()) {      lastComparison = TBaseHelper.compareTo(this.minimumNumberOfHits, typedOther.minimumNumberOfHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QUERY_STR
          if (field.type == TType.STRING) {
            this.queryStr = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MINIMUM_NUMBER_OF_HITS
          if (field.type == TType.I64) {
            this.minimumNumberOfHits = iprot.readI64();
            setMinimumNumberOfHitsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.queryStr != null) {
      oprot.writeFieldBegin(QUERY_STR_FIELD_DESC);
      oprot.writeString(this.queryStr);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MINIMUM_NUMBER_OF_HITS_FIELD_DESC);
    oprot.writeI64(this.minimumNumberOfHits);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Facet(");
    boolean first = true;

    sb.append("queryStr:");
    if (this.queryStr == null) {
      sb.append("null");
    } else {
      sb.append(this.queryStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minimumNumberOfHits:");
    sb.append(this.minimumNumberOfHits);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

