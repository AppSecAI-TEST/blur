/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.nearinfinity.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FacetQuery implements TBase<FacetQuery, FacetQuery._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FacetQuery");

  private static final TField SEARCH_QUERY_FIELD_DESC = new TField("searchQuery", TType.STRUCT, (short)1);
  private static final TField FACETS_FIELD_DESC = new TField("facets", TType.LIST, (short)2);
  private static final TField MAX_QUERY_TIME_FIELD_DESC = new TField("maxQueryTime", TType.I64, (short)3);

  public SearchQuery searchQuery;
  public List<Facet> facets;
  public long maxQueryTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SEARCH_QUERY((short)1, "searchQuery"),
    FACETS((short)2, "facets"),
    MAX_QUERY_TIME((short)3, "maxQueryTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEARCH_QUERY
          return SEARCH_QUERY;
        case 2: // FACETS
          return FACETS;
        case 3: // MAX_QUERY_TIME
          return MAX_QUERY_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXQUERYTIME_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEARCH_QUERY, new FieldMetaData("searchQuery", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, SearchQuery.class)));
    tmpMap.put(_Fields.FACETS, new FieldMetaData("facets", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Facet.class))));
    tmpMap.put(_Fields.MAX_QUERY_TIME, new FieldMetaData("maxQueryTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FacetQuery.class, metaDataMap);
  }

  public FacetQuery() {
  }

  public FacetQuery(
    SearchQuery searchQuery,
    List<Facet> facets,
    long maxQueryTime)
  {
    this();
    this.searchQuery = searchQuery;
    this.facets = facets;
    this.maxQueryTime = maxQueryTime;
    setMaxQueryTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetQuery(FacetQuery other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSearchQuery()) {
      this.searchQuery = new SearchQuery(other.searchQuery);
    }
    if (other.isSetFacets()) {
      List<Facet> __this__facets = new ArrayList<Facet>();
      for (Facet other_element : other.facets) {
        __this__facets.add(new Facet(other_element));
      }
      this.facets = __this__facets;
    }
    this.maxQueryTime = other.maxQueryTime;
  }

  public FacetQuery deepCopy() {
    return new FacetQuery(this);
  }

  @Override
  public void clear() {
    this.searchQuery = null;
    this.facets = null;
    setMaxQueryTimeIsSet(false);
    this.maxQueryTime = 0;
  }

  public SearchQuery getSearchQuery() {
    return this.searchQuery;
  }

  public FacetQuery setSearchQuery(SearchQuery searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

  public void unsetSearchQuery() {
    this.searchQuery = null;
  }

  /** Returns true if field searchQuery is set (has been asigned a value) and false otherwise */
  public boolean isSetSearchQuery() {
    return this.searchQuery != null;
  }

  public void setSearchQueryIsSet(boolean value) {
    if (!value) {
      this.searchQuery = null;
    }
  }

  public int getFacetsSize() {
    return (this.facets == null) ? 0 : this.facets.size();
  }

  public java.util.Iterator<Facet> getFacetsIterator() {
    return (this.facets == null) ? null : this.facets.iterator();
  }

  public void addToFacets(Facet elem) {
    if (this.facets == null) {
      this.facets = new ArrayList<Facet>();
    }
    this.facets.add(elem);
  }

  public List<Facet> getFacets() {
    return this.facets;
  }

  public FacetQuery setFacets(List<Facet> facets) {
    this.facets = facets;
    return this;
  }

  public void unsetFacets() {
    this.facets = null;
  }

  /** Returns true if field facets is set (has been asigned a value) and false otherwise */
  public boolean isSetFacets() {
    return this.facets != null;
  }

  public void setFacetsIsSet(boolean value) {
    if (!value) {
      this.facets = null;
    }
  }

  public long getMaxQueryTime() {
    return this.maxQueryTime;
  }

  public FacetQuery setMaxQueryTime(long maxQueryTime) {
    this.maxQueryTime = maxQueryTime;
    setMaxQueryTimeIsSet(true);
    return this;
  }

  public void unsetMaxQueryTime() {
    __isset_bit_vector.clear(__MAXQUERYTIME_ISSET_ID);
  }

  /** Returns true if field maxQueryTime is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxQueryTime() {
    return __isset_bit_vector.get(__MAXQUERYTIME_ISSET_ID);
  }

  public void setMaxQueryTimeIsSet(boolean value) {
    __isset_bit_vector.set(__MAXQUERYTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEARCH_QUERY:
      if (value == null) {
        unsetSearchQuery();
      } else {
        setSearchQuery((SearchQuery)value);
      }
      break;

    case FACETS:
      if (value == null) {
        unsetFacets();
      } else {
        setFacets((List<Facet>)value);
      }
      break;

    case MAX_QUERY_TIME:
      if (value == null) {
        unsetMaxQueryTime();
      } else {
        setMaxQueryTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEARCH_QUERY:
      return getSearchQuery();

    case FACETS:
      return getFacets();

    case MAX_QUERY_TIME:
      return new Long(getMaxQueryTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEARCH_QUERY:
      return isSetSearchQuery();
    case FACETS:
      return isSetFacets();
    case MAX_QUERY_TIME:
      return isSetMaxQueryTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetQuery)
      return this.equals((FacetQuery)that);
    return false;
  }

  public boolean equals(FacetQuery that) {
    if (that == null)
      return false;

    boolean this_present_searchQuery = true && this.isSetSearchQuery();
    boolean that_present_searchQuery = true && that.isSetSearchQuery();
    if (this_present_searchQuery || that_present_searchQuery) {
      if (!(this_present_searchQuery && that_present_searchQuery))
        return false;
      if (!this.searchQuery.equals(that.searchQuery))
        return false;
    }

    boolean this_present_facets = true && this.isSetFacets();
    boolean that_present_facets = true && that.isSetFacets();
    if (this_present_facets || that_present_facets) {
      if (!(this_present_facets && that_present_facets))
        return false;
      if (!this.facets.equals(that.facets))
        return false;
    }

    boolean this_present_maxQueryTime = true;
    boolean that_present_maxQueryTime = true;
    if (this_present_maxQueryTime || that_present_maxQueryTime) {
      if (!(this_present_maxQueryTime && that_present_maxQueryTime))
        return false;
      if (this.maxQueryTime != that.maxQueryTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FacetQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FacetQuery typedOther = (FacetQuery)other;

    lastComparison = Boolean.valueOf(isSetSearchQuery()).compareTo(typedOther.isSetSearchQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchQuery()) {
      lastComparison = TBaseHelper.compareTo(this.searchQuery, typedOther.searchQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacets()).compareTo(typedOther.isSetFacets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacets()) {
      lastComparison = TBaseHelper.compareTo(this.facets, typedOther.facets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxQueryTime()).compareTo(typedOther.isSetMaxQueryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxQueryTime()) {
      lastComparison = TBaseHelper.compareTo(this.maxQueryTime, typedOther.maxQueryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SEARCH_QUERY
          if (field.type == TType.STRUCT) {
            this.searchQuery = new SearchQuery();
            this.searchQuery.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FACETS
          if (field.type == TType.LIST) {
            {
              TList _list55 = iprot.readListBegin();
              this.facets = new ArrayList<Facet>(_list55.size);
              for (int _i56 = 0; _i56 < _list55.size; ++_i56)
              {
                Facet _elem57;
                _elem57 = new Facet();
                _elem57.read(iprot);
                this.facets.add(_elem57);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MAX_QUERY_TIME
          if (field.type == TType.I64) {
            this.maxQueryTime = iprot.readI64();
            setMaxQueryTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.searchQuery != null) {
      oprot.writeFieldBegin(SEARCH_QUERY_FIELD_DESC);
      this.searchQuery.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.facets != null) {
      oprot.writeFieldBegin(FACETS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.facets.size()));
        for (Facet _iter58 : this.facets)
        {
          _iter58.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MAX_QUERY_TIME_FIELD_DESC);
    oprot.writeI64(this.maxQueryTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FacetQuery(");
    boolean first = true;

    sb.append("searchQuery:");
    if (this.searchQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.searchQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("facets:");
    if (this.facets == null) {
      sb.append("null");
    } else {
      sb.append(this.facets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxQueryTime:");
    sb.append(this.maxQueryTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

